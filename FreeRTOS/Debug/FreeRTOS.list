
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da0  08003da0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d2c  20000010  08003db8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d3c  08003db8  00025d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d02a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d46  00000000  00000000  0002d06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002edb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020561  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009aa6  00000000  00000000  000506c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c95c4  00000000  00000000  0005a16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f0  00000000  00000000  001237b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c80 	.word	0x08003c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003c80 	.word	0x08003c80

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_InitTick+0x54>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_InitTick+0x58>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f8d4 	bl	800069c <HAL_SYSTICK_Config>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e00e      	b.n	800051c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d80a      	bhi.n	800051a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	2200      	movs	r2, #0
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f8aa 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <HAL_InitTick+0x5c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000516:	2300      	movs	r3, #0
 8000518:	e000      	b.n	800051c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000000c 	.word	0x2000000c
 8000528:	20000004 	.word	0x20000004
 800052c:	20000000 	.word	0x20000000

08000530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return uwTick;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <HAL_GetTick+0x14>)
 8000536:	681b      	ldr	r3, [r3, #0]
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20005b20 	.word	0x20005b20

08000548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <__NVIC_GetPriorityGrouping+0x18>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	f003 0307 	and.w	r3, r3, #7
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	6039      	str	r1, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	db0a      	blt.n	800058e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	490c      	ldr	r1, [pc, #48]	; (80005b0 <__NVIC_SetPriority+0x4c>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	0112      	lsls	r2, r2, #4
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	440b      	add	r3, r1
 8000588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800058c:	e00a      	b.n	80005a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4908      	ldr	r1, [pc, #32]	; (80005b4 <__NVIC_SetPriority+0x50>)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f003 030f 	and.w	r3, r3, #15
 800059a:	3b04      	subs	r3, #4
 800059c:	0112      	lsls	r2, r2, #4
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	440b      	add	r3, r1
 80005a2:	761a      	strb	r2, [r3, #24]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000e100 	.word	0xe000e100
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	f1c3 0307 	rsb	r3, r3, #7
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	bf28      	it	cs
 80005d6:	2304      	movcs	r3, #4
 80005d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	3304      	adds	r3, #4
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d902      	bls.n	80005e8 <NVIC_EncodePriority+0x30>
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3b03      	subs	r3, #3
 80005e6:	e000      	b.n	80005ea <NVIC_EncodePriority+0x32>
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 32ff 	mov.w	r2, #4294967295
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43da      	mvns	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	401a      	ands	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43d9      	mvns	r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	4313      	orrs	r3, r2
         );
}
 8000612:	4618      	mov	r0, r3
 8000614:	3724      	adds	r7, #36	; 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000630:	d301      	bcc.n	8000636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000632:	2301      	movs	r3, #1
 8000634:	e00f      	b.n	8000656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <SysTick_Config+0x40>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800063e:	210f      	movs	r1, #15
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f7ff ff8e 	bl	8000564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <SysTick_Config+0x40>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <SysTick_Config+0x40>)
 8000650:	2207      	movs	r2, #7
 8000652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	e000e010 	.word	0xe000e010

08000664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000676:	f7ff ff67 	bl	8000548 <__NVIC_GetPriorityGrouping>
 800067a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	6978      	ldr	r0, [r7, #20]
 8000682:	f7ff ff99 	bl	80005b8 <NVIC_EncodePriority>
 8000686:	4602      	mov	r2, r0
 8000688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff68 	bl	8000564 <__NVIC_SetPriority>
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffbb 	bl	8000620 <SysTick_Config>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e22d      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d075      	beq.n	80007be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80006d2:	4ba3      	ldr	r3, [pc, #652]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	f003 030c 	and.w	r3, r3, #12
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d00c      	beq.n	80006f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006de:	4ba0      	ldr	r3, [pc, #640]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d112      	bne.n	8000710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006ea:	4b9d      	ldr	r3, [pc, #628]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80006f6:	d10b      	bne.n	8000710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006f8:	4b99      	ldr	r3, [pc, #612]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d05b      	beq.n	80007bc <HAL_RCC_OscConfig+0x108>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d157      	bne.n	80007bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e208      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000718:	d106      	bne.n	8000728 <HAL_RCC_OscConfig+0x74>
 800071a:	4b91      	ldr	r3, [pc, #580]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a90      	ldr	r2, [pc, #576]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e01d      	b.n	8000764 <HAL_RCC_OscConfig+0xb0>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000730:	d10c      	bne.n	800074c <HAL_RCC_OscConfig+0x98>
 8000732:	4b8b      	ldr	r3, [pc, #556]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a8a      	ldr	r2, [pc, #552]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a87      	ldr	r2, [pc, #540]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	e00b      	b.n	8000764 <HAL_RCC_OscConfig+0xb0>
 800074c:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a83      	ldr	r2, [pc, #524]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b81      	ldr	r3, [pc, #516]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a80      	ldr	r2, [pc, #512]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 800075e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d013      	beq.n	8000794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800076c:	f7ff fee0 	bl	8000530 <HAL_GetTick>
 8000770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000772:	e008      	b.n	8000786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000774:	f7ff fedc 	bl	8000530 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	2b64      	cmp	r3, #100	; 0x64
 8000780:	d901      	bls.n	8000786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000782:	2303      	movs	r3, #3
 8000784:	e1cd      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000786:	4b76      	ldr	r3, [pc, #472]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f0      	beq.n	8000774 <HAL_RCC_OscConfig+0xc0>
 8000792:	e014      	b.n	80007be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000794:	f7ff fecc 	bl	8000530 <HAL_GetTick>
 8000798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800079a:	e008      	b.n	80007ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800079c:	f7ff fec8 	bl	8000530 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	2b64      	cmp	r3, #100	; 0x64
 80007a8:	d901      	bls.n	80007ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80007aa:	2303      	movs	r3, #3
 80007ac:	e1b9      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ae:	4b6c      	ldr	r3, [pc, #432]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f0      	bne.n	800079c <HAL_RCC_OscConfig+0xe8>
 80007ba:	e000      	b.n	80007be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d063      	beq.n	8000892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80007ca:	4b65      	ldr	r3, [pc, #404]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f003 030c 	and.w	r3, r3, #12
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00b      	beq.n	80007ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d11c      	bne.n	800081c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007e2:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d116      	bne.n	800081c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007ee:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <HAL_RCC_OscConfig+0x152>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d001      	beq.n	8000806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e18d      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000806:	4b56      	ldr	r3, [pc, #344]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4952      	ldr	r1, [pc, #328]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000816:	4313      	orrs	r3, r2
 8000818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800081a:	e03a      	b.n	8000892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d020      	beq.n	8000866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000824:	4b4f      	ldr	r3, [pc, #316]	; (8000964 <HAL_RCC_OscConfig+0x2b0>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800082a:	f7ff fe81 	bl	8000530 <HAL_GetTick>
 800082e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000830:	e008      	b.n	8000844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000832:	f7ff fe7d 	bl	8000530 <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b02      	cmp	r3, #2
 800083e:	d901      	bls.n	8000844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000840:	2303      	movs	r3, #3
 8000842:	e16e      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000844:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f0      	beq.n	8000832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	4940      	ldr	r1, [pc, #256]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
 8000864:	e015      	b.n	8000892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <HAL_RCC_OscConfig+0x2b0>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800086c:	f7ff fe60 	bl	8000530 <HAL_GetTick>
 8000870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000872:	e008      	b.n	8000886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000874:	f7ff fe5c 	bl	8000530 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b02      	cmp	r3, #2
 8000880:	d901      	bls.n	8000886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000882:	2303      	movs	r3, #3
 8000884:	e14d      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000886:	4b36      	ldr	r3, [pc, #216]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f0      	bne.n	8000874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	2b00      	cmp	r3, #0
 800089c:	d030      	beq.n	8000900 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d016      	beq.n	80008d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <HAL_RCC_OscConfig+0x2b4>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008ac:	f7ff fe40 	bl	8000530 <HAL_GetTick>
 80008b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008b2:	e008      	b.n	80008c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008b4:	f7ff fe3c 	bl	8000530 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d901      	bls.n	80008c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e12d      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80008c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f0      	beq.n	80008b4 <HAL_RCC_OscConfig+0x200>
 80008d2:	e015      	b.n	8000900 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <HAL_RCC_OscConfig+0x2b4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008da:	f7ff fe29 	bl	8000530 <HAL_GetTick>
 80008de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e0:	e008      	b.n	80008f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008e2:	f7ff fe25 	bl	8000530 <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d901      	bls.n	80008f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80008f0:	2303      	movs	r3, #3
 80008f2:	e116      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 80008f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f0      	bne.n	80008e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 80a0 	beq.w	8000a4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10f      	bne.n	800093e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_RCC_OscConfig+0x2ac>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800093a:	2301      	movs	r3, #1
 800093c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_RCC_OscConfig+0x2b8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000946:	2b00      	cmp	r3, #0
 8000948:	d121      	bne.n	800098e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_RCC_OscConfig+0x2b8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_RCC_OscConfig+0x2b8>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000956:	f7ff fdeb 	bl	8000530 <HAL_GetTick>
 800095a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800095c:	e011      	b.n	8000982 <HAL_RCC_OscConfig+0x2ce>
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	42470000 	.word	0x42470000
 8000968:	42470e80 	.word	0x42470e80
 800096c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000970:	f7ff fdde 	bl	8000530 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d901      	bls.n	8000982 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800097e:	2303      	movs	r3, #3
 8000980:	e0cf      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <HAL_RCC_OscConfig+0x478>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f0      	beq.n	8000970 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d106      	bne.n	80009a4 <HAL_RCC_OscConfig+0x2f0>
 8000996:	4b66      	ldr	r3, [pc, #408]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800099a:	4a65      	ldr	r2, [pc, #404]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6713      	str	r3, [r2, #112]	; 0x70
 80009a2:	e01c      	b.n	80009de <HAL_RCC_OscConfig+0x32a>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b05      	cmp	r3, #5
 80009aa:	d10c      	bne.n	80009c6 <HAL_RCC_OscConfig+0x312>
 80009ac:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009b0:	4a5f      	ldr	r2, [pc, #380]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6713      	str	r3, [r2, #112]	; 0x70
 80009b8:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009bc:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6713      	str	r3, [r2, #112]	; 0x70
 80009c4:	e00b      	b.n	80009de <HAL_RCC_OscConfig+0x32a>
 80009c6:	4b5a      	ldr	r3, [pc, #360]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009ca:	4a59      	ldr	r2, [pc, #356]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009cc:	f023 0301 	bic.w	r3, r3, #1
 80009d0:	6713      	str	r3, [r2, #112]	; 0x70
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009d6:	4a56      	ldr	r2, [pc, #344]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 80009d8:	f023 0304 	bic.w	r3, r3, #4
 80009dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d015      	beq.n	8000a12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009e6:	f7ff fda3 	bl	8000530 <HAL_GetTick>
 80009ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ec:	e00a      	b.n	8000a04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ee:	f7ff fd9f 	bl	8000530 <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d901      	bls.n	8000a04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e08e      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a04:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0ee      	beq.n	80009ee <HAL_RCC_OscConfig+0x33a>
 8000a10:	e014      	b.n	8000a3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a12:	f7ff fd8d 	bl	8000530 <HAL_GetTick>
 8000a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a18:	e00a      	b.n	8000a30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1a:	f7ff fd89 	bl	8000530 <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e078      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1ee      	bne.n	8000a1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d105      	bne.n	8000a4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a3a      	ldr	r2, [pc, #232]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d064      	beq.n	8000b20 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	d05c      	beq.n	8000b1c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d141      	bne.n	8000aee <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <HAL_RCC_OscConfig+0x480>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a70:	f7ff fd5e 	bl	8000530 <HAL_GetTick>
 8000a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a76:	e008      	b.n	8000a8a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a78:	f7ff fd5a 	bl	8000530 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d901      	bls.n	8000a8a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e04b      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f0      	bne.n	8000a78 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	061b      	lsls	r3, r3, #24
 8000aba:	491d      	ldr	r1, [pc, #116]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_RCC_OscConfig+0x480>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fd33 	bl	8000530 <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000acc:	e008      	b.n	8000ae0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ace:	f7ff fd2f 	bl	8000530 <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e020      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f0      	beq.n	8000ace <HAL_RCC_OscConfig+0x41a>
 8000aec:	e018      	b.n	8000b20 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_RCC_OscConfig+0x480>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff fd1c 	bl	8000530 <HAL_GetTick>
 8000af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000afa:	e008      	b.n	8000b0e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afc:	f7ff fd18 	bl	8000530 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d901      	bls.n	8000b0e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e009      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_RCC_OscConfig+0x47c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f0      	bne.n	8000afc <HAL_RCC_OscConfig+0x448>
 8000b1a:	e001      	b.n	8000b20 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40007000 	.word	0x40007000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	42470060 	.word	0x42470060

08000b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e0ca      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b4c:	4b67      	ldr	r3, [pc, #412]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d90c      	bls.n	8000b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b62:	4b62      	ldr	r3, [pc, #392]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d001      	beq.n	8000b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e0b6      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d020      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d005      	beq.n	8000b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b8c:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4a51      	ldr	r2, [pc, #324]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	494c      	ldr	r1, [pc, #304]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d044      	beq.n	8000c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d107      	bne.n	8000be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd6:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d119      	bne.n	8000c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e07d      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d003      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d107      	bne.n	8000c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e06d      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c06:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e065      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f023 0203 	bic.w	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4933      	ldr	r1, [pc, #204]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c28:	f7ff fc82 	bl	8000530 <HAL_GetTick>
 8000c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c2e:	e00a      	b.n	8000c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c30:	f7ff fc7e 	bl	8000530 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e04d      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 020c 	and.w	r2, r3, #12
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d1eb      	bne.n	8000c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 030f 	and.w	r3, r3, #15
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d20c      	bcs.n	8000c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_RCC_ClockConfig+0x1b4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d001      	beq.n	8000c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e030      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d008      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	4915      	ldr	r1, [pc, #84]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d009      	beq.n	8000cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cbe:	f000 f81d 	bl	8000cfc <HAL_RCC_GetSysClockFreq>
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fbf8 	bl	80004d0 <HAL_InitTick>

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	08003d88 	.word	0x08003d88
 8000cf8:	2000000c 	.word	0x2000000c

08000cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d007      	beq.n	8000d2e <HAL_RCC_GetSysClockFreq+0x32>
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d008      	beq.n	8000d34 <HAL_RCC_GetSysClockFreq+0x38>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 808d 	bne.w	8000e42 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000d2a:	60bb      	str	r3, [r7, #8]
       break;
 8000d2c:	e08c      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8000d30:	60bb      	str	r3, [r7, #8]
      break;
 8000d32:	e089      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d34:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d023      	beq.n	8000d92 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d4a:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	099b      	lsrs	r3, r3, #6
 8000d50:	f04f 0400 	mov.w	r4, #0
 8000d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	ea03 0501 	and.w	r5, r3, r1
 8000d60:	ea04 0602 	and.w	r6, r4, r2
 8000d64:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8000d66:	fb02 f106 	mul.w	r1, r2, r6
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	fb02 f205 	mul.w	r2, r2, r5
 8000d70:	440a      	add	r2, r1
 8000d72:	493a      	ldr	r1, [pc, #232]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8000d74:	fba5 0101 	umull	r0, r1, r5, r1
 8000d78:	1853      	adds	r3, r2, r1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f04f 0400 	mov.w	r4, #0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4623      	mov	r3, r4
 8000d86:	f7ff fa23 	bl	80001d0 <__aeabi_uldivmod>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e049      	b.n	8000e26 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	099b      	lsrs	r3, r3, #6
 8000d98:	f04f 0400 	mov.w	r4, #0
 8000d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	ea03 0501 	and.w	r5, r3, r1
 8000da8:	ea04 0602 	and.w	r6, r4, r2
 8000dac:	4629      	mov	r1, r5
 8000dae:	4632      	mov	r2, r6
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	f04f 0400 	mov.w	r4, #0
 8000db8:	0154      	lsls	r4, r2, #5
 8000dba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000dbe:	014b      	lsls	r3, r1, #5
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4622      	mov	r2, r4
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	eb62 0206 	sbc.w	r2, r2, r6
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	f04f 0400 	mov.w	r4, #0
 8000dd2:	0194      	lsls	r4, r2, #6
 8000dd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000dd8:	018b      	lsls	r3, r1, #6
 8000dda:	1a5b      	subs	r3, r3, r1
 8000ddc:	eb64 0402 	sbc.w	r4, r4, r2
 8000de0:	f04f 0100 	mov.w	r1, #0
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	00e2      	lsls	r2, r4, #3
 8000dea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000dee:	00d9      	lsls	r1, r3, #3
 8000df0:	460b      	mov	r3, r1
 8000df2:	4614      	mov	r4, r2
 8000df4:	195b      	adds	r3, r3, r5
 8000df6:	eb44 0406 	adc.w	r4, r4, r6
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	02a2      	lsls	r2, r4, #10
 8000e04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000e08:	0299      	lsls	r1, r3, #10
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4614      	mov	r4, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	4621      	mov	r1, r4
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f04f 0400 	mov.w	r4, #0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	f7ff f9d8 	bl	80001d0 <__aeabi_uldivmod>
 8000e20:	4603      	mov	r3, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	3301      	adds	r3, #1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
      break;
 8000e40:	e002      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e44:	60bb      	str	r3, [r7, #8]
      break;
 8000e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e48:	68bb      	ldr	r3, [r7, #8]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	00f42400 	.word	0x00f42400
 8000e5c:	017d7840 	.word	0x017d7840

08000e60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0208 	add.w	r2, r3, #8
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f103 0208 	add.w	r2, r3, #8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f103 0208 	add.w	r2, r3, #8
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f02:	b480      	push	{r7}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6892      	ldr	r2, [r2, #8]
 8000f18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6852      	ldr	r2, [r2, #4]
 8000f22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d103      	bne.n	8000f36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1e5a      	subs	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <xTaskCreate>:
        const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
        const configSTACK_DEPTH_TYPE usStackDepth,
        void * const pvParameters,
        UBaseType_t uxPriority,
        TaskHandle_t * const pxCreatedTask )
    {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b08c      	sub	sp, #48	; 0x30
 8000f5a:	af04      	add	r7, sp, #16
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80fb      	strh	r3, [r7, #6]
#else /* portSTACK_GROWTH */
      {
        StackType_t *pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff98 	bl	8001ea0 <pvPortMalloc>
 8000f70:	6178      	str	r0, [r7, #20]

        if( pxStack != NULL )
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00e      	beq.n	8000f96 <xTaskCreate+0x40>
        {
          /* Allocate space for the TCB. */
          pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000f78:	207c      	movs	r0, #124	; 0x7c
 8000f7a:	f000 ff91 	bl	8001ea0 <pvPortMalloc>
 8000f7e:	61f8      	str	r0, [r7, #28]

          if( pxNewTCB != NULL )
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <xTaskCreate+0x38>
          {
            /* Store the stack location in the TCB. */
            pxNewTCB->pxStack = pxStack;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8000f8c:	e005      	b.n	8000f9a <xTaskCreate+0x44>
          }
          else
          {
            /* The stack cannot be used as the TCB was not created.  Free
					it again. */
            vPortFree( pxStack );
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f001 f848 	bl	8002024 <vPortFree>
 8000f94:	e001      	b.n	8000f9a <xTaskCreate+0x44>
          }
        }
        else
        {
          pxNewTCB = NULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
        }
      }
#endif /* portSTACK_GROWTH */

      if( pxNewTCB != NULL )
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
          pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f80e 	bl	8000fd8 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList( pxNewTCB );
 8000fbc:	69f8      	ldr	r0, [r7, #28]
 8000fbe:	f000 f891 	bl	80010e4 <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	e002      	b.n	8000fce <xTaskCreate+0x78>
      }
      else
      {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	61bb      	str	r3, [r7, #24]
      }

      return xReturn;
 8000fce:	69bb      	ldr	r3, [r7, #24]
    }
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <prvInitialiseNewTask>:
        void * const pvParameters,
        UBaseType_t uxPriority,
        TaskHandle_t * const pxCreatedTask,
        TCB_t *pxNewTCB,
        const MemoryRegion_t * const xRegions )
    {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
#if( portSTACK_GROWTH < 0 )
      {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	f023 0307 	bic.w	r3, r3, #7
 8000ffe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	2b00      	cmp	r3, #0
 8001008:	d009      	beq.n	800101e <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100e:	f383 8811 	msr	BASEPRI, r3
 8001012:	f3bf 8f6f 	isb	sy
 8001016:	f3bf 8f4f 	dsb	sy
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e7fe      	b.n	800101c <prvInitialiseNewTask+0x44>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
      }
#endif /* portSTACK_GROWTH */

      /* Store the task name in the TCB. */
      if( pcName != NULL )
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01f      	beq.n	8001064 <prvInitialiseNewTask+0x8c>
      {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	e012      	b.n	8001050 <prvInitialiseNewTask+0x78>
        {
          pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	4413      	add	r3, r2
 8001038:	335c      	adds	r3, #92	; 0x5c
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]

          /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
          if( pcName[ x ] == ( char ) 0x00 )
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0e      	cmp	r3, #14
 8001054:	d9e9      	bls.n	800102a <prvInitialiseNewTask+0x52>
 8001056:	e000      	b.n	800105a <prvInitialiseNewTask+0x82>
          {
            break;
 8001058:	bf00      	nop
          }
        }

        /* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105c:	2200      	movs	r2, #0
 800105e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001062:	e003      	b.n	800106c <prvInitialiseNewTask+0x94>
      }
      else
      {
        /* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      }

      /* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
      if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	2b04      	cmp	r3, #4
 8001070:	d901      	bls.n	8001076 <prvInitialiseNewTask+0x9e>
      {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001072:	2304      	movs	r3, #4
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }

      pxNewTCB->uxPriority = uxPriority;
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107a:	655a      	str	r2, [r3, #84]	; 0x54
#if ( configUSE_MUTEXES == 1 )
      {
        pxNewTCB->uxBasePriority = uxPriority;
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001080:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewTCB->uxMutexesHeld = 0;
 8001082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001084:	2200      	movs	r2, #0
 8001086:	671a      	str	r2, [r3, #112]	; 0x70
      }
#endif /* configUSE_MUTEXES */

      vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108a:	332c      	adds	r3, #44	; 0x2c
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff07 	bl	8000ea0 <vListInitialiseItem>
      vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001094:	3340      	adds	r3, #64	; 0x40
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff02 	bl	8000ea0 <vListInitialiseItem>

      /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
      listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Event lists are always in priority order. */
      listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	f1c3 0205 	rsb	r2, r3, #5
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
      listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b0:	64da      	str	r2, [r3, #76]	; 0x4c
      }
#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
      {
        pxNewTCB->ulNotifiedValue = 0;
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	2200      	movs	r2, #0
 80010b6:	675a      	str	r2, [r3, #116]	; 0x74
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          }
#endif /* portSTACK_GROWTH */
        }
#else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
          pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	69b8      	ldr	r0, [r7, #24]
 80010c6:	f000 fc9f 	bl	8001a08 <pxPortInitialiseStack>
 80010ca:	4602      	mov	r2, r0
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
      }
#endif /* portUSING_MPU_WRAPPERS */

      if( pxCreatedTask != NULL )
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <prvInitialiseNewTask+0x104>
      {
        /* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010da:	601a      	str	r2, [r3, #0]
      }
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }
    }
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <prvAddNewTaskToReadyList>:
    /*-----------------------------------------------------------*/

    static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
    {
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	6078      	str	r0, [r7, #4]
      /* Ensure interrupts don't access the task lists while the lists are being
	updated. */
      taskENTER_CRITICAL();
 80010ec:	f000 fdc6 	bl	8001c7c <vPortEnterCritical>
      {
        uxCurrentNumberOfTasks++;
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <prvAddNewTaskToReadyList+0xf4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <prvAddNewTaskToReadyList+0xf4>)
 80010f8:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <prvAddNewTaskToReadyList+0xf8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <prvAddNewTaskToReadyList+0x32>
        {
          /* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
          pxCurrentTCB = pxNewTCB;
 8001102:	4a36      	ldr	r2, [pc, #216]	; (80011dc <prvAddNewTaskToReadyList+0xf8>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6013      	str	r3, [r2, #0]

          if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <prvAddNewTaskToReadyList+0xf4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d110      	bne.n	8001132 <prvAddNewTaskToReadyList+0x4e>
          {
            /* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
            prvInitialiseTaskLists();
 8001110:	f000 fa2e 	bl	8001570 <prvInitialiseTaskLists>
 8001114:	e00d      	b.n	8001132 <prvAddNewTaskToReadyList+0x4e>
        else
        {
          /* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
          if( xSchedulerRunning == pdFALSE )
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <prvAddNewTaskToReadyList+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <prvAddNewTaskToReadyList+0x4e>
          {
            if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <prvAddNewTaskToReadyList+0xf8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001128:	429a      	cmp	r2, r3
 800112a:	d802      	bhi.n	8001132 <prvAddNewTaskToReadyList+0x4e>
            {
              pxCurrentTCB = pxNewTCB;
 800112c:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <prvAddNewTaskToReadyList+0xf8>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
          {
            mtCOVERAGE_TEST_MARKER();
          }
        }

        uxTaskNumber++;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <prvAddNewTaskToReadyList+0x100>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <prvAddNewTaskToReadyList+0x100>)
 800113a:	6013      	str	r3, [r2, #0]
        {
          /* Add a counter into the TCB for tracing only. */
          pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d016      	beq.n	8001170 <prvAddNewTaskToReadyList+0x8c>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	f002 f89b 	bl	8003280 <SEGGER_SYSVIEW_OnTaskCreate>
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	461d      	mov	r5, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	461c      	mov	r4, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	1ae3      	subs	r3, r4, r3
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	462b      	mov	r3, r5
 800116c:	f002 fb32 	bl	80037d4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f90c 	bl	8003390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <prvAddNewTaskToReadyList+0x104>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <prvAddNewTaskToReadyList+0x104>)
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <prvAddNewTaskToReadyList+0x108>)
 8001198:	441a      	add	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	332c      	adds	r3, #44	; 0x2c
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff fe8a 	bl	8000eba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
      }
      taskEXIT_CRITICAL();
 80011a6:	f000 fd97 	bl	8001cd8 <vPortExitCritical>

      if( xSchedulerRunning != pdFALSE )
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <prvAddNewTaskToReadyList+0xfc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00e      	beq.n	80011d0 <prvAddNewTaskToReadyList+0xec>
      {
        /* If the created task is of a higher priority than the current task
		then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <prvAddNewTaskToReadyList+0xf8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <prvAddNewTaskToReadyList+0xec>
        {
          taskYIELD_IF_USING_PREEMPTION();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <prvAddNewTaskToReadyList+0x10c>)
 80011c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	f3bf 8f6f 	isb	sy
      }
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }
    }
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	20000108 	.word	0x20000108
 80011dc:	20000030 	.word	0x20000030
 80011e0:	20000114 	.word	0x20000114
 80011e4:	20000120 	.word	0x20000120
 80011e8:	20000110 	.word	0x20000110
 80011ec:	20000034 	.word	0x20000034
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
    /*-----------------------------------------------------------*/

    void vTaskStartScheduler( void )
    {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
        }
      }
#else
      {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate(	prvIdleTask,
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <vTaskStartScheduler+0x90>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	2282      	movs	r2, #130	; 0x82
 8001206:	4920      	ldr	r1, [pc, #128]	; (8001288 <vTaskStartScheduler+0x94>)
 8001208:	4820      	ldr	r0, [pc, #128]	; (800128c <vTaskStartScheduler+0x98>)
 800120a:	f7ff fea4 	bl	8000f56 <xTaskCreate>
 800120e:	60f8      	str	r0, [r7, #12]
          mtCOVERAGE_TEST_MARKER();
        }
      }
#endif /* configUSE_TIMERS */

      if( xReturn == pdPASS )
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d123      	bne.n	800125e <vTaskStartScheduler+0x6a>
 8001216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121a:	f383 8811 	msr	BASEPRI, r3
 800121e:	f3bf 8f6f 	isb	sy
 8001222:	f3bf 8f4f 	dsb	sy
 8001226:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
          _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <vTaskStartScheduler+0x9c>)
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <vTaskStartScheduler+0xa0>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <vTaskStartScheduler+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <vTaskStartScheduler+0xa8>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <vTaskStartScheduler+0x90>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d102      	bne.n	800124e <vTaskStartScheduler+0x5a>
 8001248:	f001 fffe 	bl	8003248 <SEGGER_SYSVIEW_OnIdle>
 800124c:	e004      	b.n	8001258 <vTaskStartScheduler+0x64>
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <vTaskStartScheduler+0xa8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f858 	bl	8003308 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001258:	f000 fc62 	bl	8001b20 <xPortStartScheduler>
      }

      /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
      ( void ) xIdleTaskHandle;
    }
 800125c:	e00d      	b.n	800127a <vTaskStartScheduler+0x86>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d109      	bne.n	800127a <vTaskStartScheduler+0x86>
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	e7fe      	b.n	8001278 <vTaskStartScheduler+0x84>
    }
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000128 	.word	0x20000128
 8001288:	08003c98 	.word	0x08003c98
 800128c:	08001541 	.word	0x08001541
 8001290:	20000124 	.word	0x20000124
 8001294:	20000114 	.word	0x20000114
 8001298:	2000010c 	.word	0x2000010c
 800129c:	20000030 	.word	0x20000030

080012a0 <vTaskSuspendAll>:
      vPortEndScheduler();
    }
    /*----------------------------------------------------------*/

    void vTaskSuspendAll( void )
    {
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
      /* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
      ++uxSchedulerSuspended;
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <vTaskSuspendAll+0x18>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <vTaskSuspendAll+0x18>)
 80012ac:	6013      	str	r3, [r2, #0]
      portMEMORY_BARRIER();
    }
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	2000012c 	.word	0x2000012c

080012bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
    /*----------------------------------------------------------*/

    BaseType_t xTaskResumeAll( void )
    {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
      TCB_t *pxTCB = NULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
      BaseType_t xAlreadyYielded = pdFALSE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]

      /* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
      configASSERT( uxSchedulerSuspended );
 80012ca:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <xTaskResumeAll+0x11c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <xTaskResumeAll+0x2a>
 80012d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	e7fe      	b.n	80012e4 <xTaskResumeAll+0x28>
      /* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
      taskENTER_CRITICAL();
 80012e6:	f000 fcc9 	bl	8001c7c <vPortEnterCritical>
      {
        --uxSchedulerSuspended;
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <xTaskResumeAll+0x11c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <xTaskResumeAll+0x11c>)
 80012f2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012f4:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <xTaskResumeAll+0x11c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d165      	bne.n	80013c8 <xTaskResumeAll+0x10c>
        {
          if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <xTaskResumeAll+0x120>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d061      	beq.n	80013c8 <xTaskResumeAll+0x10c>
          {
            /* Move any readied tasks from the pending list into the
				appropriate ready list. */
            while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001304:	e032      	b.n	800136c <xTaskResumeAll+0xb0>
            {
              pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <xTaskResumeAll+0x124>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60fb      	str	r3, [r7, #12]
              ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3340      	adds	r3, #64	; 0x40
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fdf5 	bl	8000f02 <uxListRemove>
              ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	332c      	adds	r3, #44	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fdf0 	bl	8000f02 <uxListRemove>
              prvAddTaskToReadyList( pxTCB );
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f833 	bl	8003390 <SEGGER_SYSVIEW_OnTaskStartReady>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	2201      	movs	r2, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <xTaskResumeAll+0x128>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <xTaskResumeAll+0x128>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <xTaskResumeAll+0x12c>)
 800134a:	441a      	add	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	332c      	adds	r3, #44	; 0x2c
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff fdb1 	bl	8000eba <vListInsertEnd>

              /* If the moved task has a priority higher than the current
					task then a yield must be performed. */
              if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <xTaskResumeAll+0x130>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <xTaskResumeAll+0xb0>
              {
                xYieldPending = pdTRUE;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <xTaskResumeAll+0x134>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
            while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <xTaskResumeAll+0x124>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1c8      	bne.n	8001306 <xTaskResumeAll+0x4a>
              {
                mtCOVERAGE_TEST_MARKER();
              }
            }

            if( pxTCB != NULL )
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
              prvResetNextTaskUnblockTime();
 800137a:	f000 f975 	bl	8001668 <prvResetNextTaskUnblockTime>
            /* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
            {
              UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <xTaskResumeAll+0x138>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	607b      	str	r3, [r7, #4]

              if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <xTaskResumeAll+0xf0>
              {
                do
                {
                  if( xTaskIncrementTick() != pdFALSE )
 800138a:	f000 f849 	bl	8001420 <xTaskIncrementTick>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <xTaskResumeAll+0xde>
                  {
                    xYieldPending = pdTRUE;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <xTaskResumeAll+0x134>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
                  }
                  else
                  {
                    mtCOVERAGE_TEST_MARKER();
                  }
                  --uxPendedCounts;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3b01      	subs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
                } while( uxPendedCounts > ( UBaseType_t ) 0U );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f1      	bne.n	800138a <xTaskResumeAll+0xce>

                uxPendedTicks = 0;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <xTaskResumeAll+0x138>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
              {
                mtCOVERAGE_TEST_MARKER();
              }
            }

            if( xYieldPending != pdFALSE )
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <xTaskResumeAll+0x134>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <xTaskResumeAll+0x10c>
            {
#if( configUSE_PREEMPTION != 0 )
              {
                xAlreadyYielded = pdTRUE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
              }
#endif
              taskYIELD_IF_USING_PREEMPTION();
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <xTaskResumeAll+0x13c>)
 80013ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	f3bf 8f6f 	isb	sy
        else
        {
          mtCOVERAGE_TEST_MARKER();
        }
      }
      taskEXIT_CRITICAL();
 80013c8:	f000 fc86 	bl	8001cd8 <vPortExitCritical>

      return xAlreadyYielded;
 80013cc:	68bb      	ldr	r3, [r7, #8]
    }
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000012c 	.word	0x2000012c
 80013dc:	20000108 	.word	0x20000108
 80013e0:	200000c8 	.word	0x200000c8
 80013e4:	20000110 	.word	0x20000110
 80013e8:	20000034 	.word	0x20000034
 80013ec:	20000030 	.word	0x20000030
 80013f0:	2000011c 	.word	0x2000011c
 80013f4:	20000118 	.word	0x20000118
 80013f8:	e000ed04 	.word	0xe000ed04

080013fc <xTaskGetTickCountFromISR>:
      return xTicks;
    }
    /*-----------------------------------------------------------*/

    TickType_t xTaskGetTickCountFromISR( void )
    {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
      portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001402:	f000 fd0f 	bl	8001e24 <vPortValidateInterruptPriority>

      uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
      {
        xReturn = xTickCount;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <xTaskGetTickCountFromISR+0x20>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	603b      	str	r3, [r7, #0]
      }
      portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

      return xReturn;
 8001410:	683b      	ldr	r3, [r7, #0]
    }
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000010c 	.word	0x2000010c

08001420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
    /*----------------------------------------------------------*/

    BaseType_t xTaskIncrementTick( void )
    {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
      BaseType_t xSwitchRequired = pdFALSE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
      uint8_t TcbIndex,r;

      Ms_currentTaskIndex = pxCurrentTCB->MsID;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <xTaskIncrementTick+0x88>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	7f5a      	ldrb	r2, [r3, #29]
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <xTaskIncrementTick+0x8c>)
 8001432:	701a      	strb	r2, [r3, #0]

      xTickCount++;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <xTaskIncrementTick+0x90>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <xTaskIncrementTick+0x90>)
 800143c:	6013      	str	r3, [r2, #0]

      Ms_delay[pxCurrentTCB->MsID].DelayApp++;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <xTaskIncrementTick+0x88>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	7f5b      	ldrb	r3, [r3, #29]
 8001444:	461a      	mov	r2, r3
 8001446:	491b      	ldr	r1, [pc, #108]	; (80014b4 <xTaskIncrementTick+0x94>)
 8001448:	0113      	lsls	r3, r2, #4
 800144a:	440b      	add	r3, r1
 800144c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001450:	1c43      	adds	r3, r0, #1
 8001452:	f141 0400 	adc.w	r4, r1, #0
 8001456:	4917      	ldr	r1, [pc, #92]	; (80014b4 <xTaskIncrementTick+0x94>)
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	440a      	add	r2, r1
 800145c:	e9c2 3400 	strd	r3, r4, [r2]

      r= Ms_EnableTask();
 8001460:	f000 fa34 	bl	80018cc <Ms_EnableTask>
 8001464:	4603      	mov	r3, r0
 8001466:	70fb      	strb	r3, [r7, #3]
      Ms_UpdateDealine();
 8001468:	f000 fa92 	bl	8001990 <Ms_UpdateDealine>

      if(r)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00e      	beq.n	8001490 <xTaskIncrementTick+0x70>
      {
        TcbIndex = Ms_FindShortestDeadline();
 8001472:	f000 f9a5 	bl	80017c0 <Ms_FindShortestDeadline>
 8001476:	4603      	mov	r3, r0
 8001478:	70bb      	strb	r3, [r7, #2]

        if( pxCurrentTCB->MsID  != TcbIndex )
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <xTaskIncrementTick+0x88>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	7f5b      	ldrb	r3, [r3, #29]
 8001480:	78ba      	ldrb	r2, [r7, #2]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <xTaskIncrementTick+0x6c>
          xSwitchRequired = pdTRUE;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e001      	b.n	8001490 <xTaskIncrementTick+0x70>
        else
          xSwitchRequired = pdFALSE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
      }

      if(pxCurrentTCB->MsID==255)
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <xTaskIncrementTick+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	7f5b      	ldrb	r3, [r3, #29]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d101      	bne.n	800149e <xTaskIncrementTick+0x7e>
        xSwitchRequired = pdTRUE;
 800149a:	2301      	movs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]


      return xSwitchRequired;
 800149e:	687b      	ldr	r3, [r7, #4]
    }
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000030 	.word	0x20000030
 80014ac:	20005c90 	.word	0x20005c90
 80014b0:	2000010c 	.word	0x2000010c
 80014b4:	20005b28 	.word	0x20005b28

080014b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
    /*-----------------------------------------------------------*/

    void vTaskSwitchContext( void )
    {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

      uint8_t tn;
      if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <vTaskSwitchContext+0x70>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <vTaskSwitchContext+0x16>
      {
        /* The scheduler is currently suspended - do not allow a context
		switch. */
        xYieldPending = pdTRUE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <vTaskSwitchContext+0x74>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
          _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
#endif /* configUSE_NEWLIB_REENTRANT */
      }
    }
 80014cc:	e028      	b.n	8001520 <vTaskSwitchContext+0x68>
        xYieldPending = pdFALSE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <vTaskSwitchContext+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
        tn = Ms_FindShortestDeadline();
 80014d4:	f000 f974 	bl	80017c0 <Ms_FindShortestDeadline>
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
        if(tn!=0xff)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	d006      	beq.n	80014f0 <vTaskSwitchContext+0x38>
          pxCurrentTCB = MsArrayTCB[tn];
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <vTaskSwitchContext+0x78>)
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <vTaskSwitchContext+0x7c>)
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e009      	b.n	8001504 <vTaskSwitchContext+0x4c>
          pxCurrentTCB = pxReadyTasksLists[0].pxIndex->pxNext->pvOwner;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <vTaskSwitchContext+0x80>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <vTaskSwitchContext+0x7c>)
 80014fa:	6013      	str	r3, [r2, #0]
          pxCurrentTCB->MsID =255;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <vTaskSwitchContext+0x7c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	22ff      	movs	r2, #255	; 0xff
 8001502:	775a      	strb	r2, [r3, #29]
        traceTASK_SWITCHED_IN();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <vTaskSwitchContext+0x7c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <vTaskSwitchContext+0x84>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d102      	bne.n	8001516 <vTaskSwitchContext+0x5e>
 8001510:	f001 fe9a 	bl	8003248 <SEGGER_SYSVIEW_OnIdle>
    }
 8001514:	e004      	b.n	8001520 <vTaskSwitchContext+0x68>
        traceTASK_SWITCHED_IN();
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <vTaskSwitchContext+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fef4 	bl	8003308 <SEGGER_SYSVIEW_OnTaskStartExec>
    }
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000012c 	.word	0x2000012c
 800152c:	2000011c 	.word	0x2000011c
 8001530:	20005c68 	.word	0x20005c68
 8001534:	20000030 	.word	0x20000030
 8001538:	20000034 	.word	0x20000034
 800153c:	20000128 	.word	0x20000128

08001540 <prvIdleTask>:
     *
     * void prvIdleTask( void *pvParameters );
     *
     */
    static portTASK_FUNCTION( prvIdleTask, pvParameters )
				    {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

      for( ;; )
      {
        /* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001548:	f000 f852 	bl	80015f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
          if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <prvIdleTask+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d9f9      	bls.n	8001548 <prvIdleTask+0x8>
          {
            taskYIELD();
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <prvIdleTask+0x2c>)
 8001556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f3bf 8f4f 	dsb	sy
 8001560:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001564:	e7f0      	b.n	8001548 <prvIdleTask+0x8>
 8001566:	bf00      	nop
 8001568:	20000034 	.word	0x20000034
 800156c:	e000ed04 	.word	0xe000ed04

08001570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
    /*-----------------------------------------------------------*/

    static void prvInitialiseTaskLists( void )
    {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
      UBaseType_t uxPriority;

      for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	e00c      	b.n	8001596 <prvInitialiseTaskLists+0x26>
      {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <prvInitialiseTaskLists+0x60>)
 8001588:	4413      	add	r3, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fc68 	bl	8000e60 <vListInitialise>
      for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d9ef      	bls.n	800157c <prvInitialiseTaskLists+0xc>
      }

      vListInitialise( &xDelayedTaskList1 );
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <prvInitialiseTaskLists+0x64>)
 800159e:	f7ff fc5f 	bl	8000e60 <vListInitialise>
      vListInitialise( &xDelayedTaskList2 );
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <prvInitialiseTaskLists+0x68>)
 80015a4:	f7ff fc5c 	bl	8000e60 <vListInitialise>
      vListInitialise( &xPendingReadyList );
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <prvInitialiseTaskLists+0x6c>)
 80015aa:	f7ff fc59 	bl	8000e60 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
      {
        vListInitialise( &xTasksWaitingTermination );
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <prvInitialiseTaskLists+0x70>)
 80015b0:	f7ff fc56 	bl	8000e60 <vListInitialise>
      }
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
      {
        vListInitialise( &xSuspendedTaskList );
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <prvInitialiseTaskLists+0x74>)
 80015b6:	f7ff fc53 	bl	8000e60 <vListInitialise>
      }
#endif /* INCLUDE_vTaskSuspend */

      /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
      pxDelayedTaskList = &xDelayedTaskList1;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <prvInitialiseTaskLists+0x78>)
 80015bc:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <prvInitialiseTaskLists+0x64>)
 80015be:	601a      	str	r2, [r3, #0]
      pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <prvInitialiseTaskLists+0x7c>)
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <prvInitialiseTaskLists+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
    }
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000034 	.word	0x20000034
 80015d4:	20000098 	.word	0x20000098
 80015d8:	200000ac 	.word	0x200000ac
 80015dc:	200000c8 	.word	0x200000c8
 80015e0:	200000dc 	.word	0x200000dc
 80015e4:	200000f4 	.word	0x200000f4
 80015e8:	200000c0 	.word	0x200000c0
 80015ec:	200000c4 	.word	0x200000c4

080015f0 <prvCheckTasksWaitingTermination>:
    /*-----------------------------------------------------------*/

    static void prvCheckTasksWaitingTermination( void )
    {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
      {
        TCB_t *pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015f6:	e019      	b.n	800162c <prvCheckTasksWaitingTermination+0x3c>
        {
          taskENTER_CRITICAL();
 80015f8:	f000 fb40 	bl	8001c7c <vPortEnterCritical>
          {
            pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <prvCheckTasksWaitingTermination+0x4c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	607b      	str	r3, [r7, #4]
            ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	332c      	adds	r3, #44	; 0x2c
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc7a 	bl	8000f02 <uxListRemove>
            --uxCurrentNumberOfTasks;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <prvCheckTasksWaitingTermination+0x50>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <prvCheckTasksWaitingTermination+0x50>)
 8001616:	6013      	str	r3, [r2, #0]
            --uxDeletedTasksWaitingCleanUp;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <prvCheckTasksWaitingTermination+0x54>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <prvCheckTasksWaitingTermination+0x54>)
 8001620:	6013      	str	r3, [r2, #0]
          }
          taskEXIT_CRITICAL();
 8001622:	f000 fb59 	bl	8001cd8 <vPortExitCritical>

          prvDeleteTCB( pxTCB );
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f80e 	bl	8001648 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <prvCheckTasksWaitingTermination+0x54>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e1      	bne.n	80015f8 <prvCheckTasksWaitingTermination+0x8>
        }
      }
#endif /* INCLUDE_vTaskDelete */
    }
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200000dc 	.word	0x200000dc
 8001640:	20000108 	.word	0x20000108
 8001644:	200000f0 	.word	0x200000f0

08001648 <prvDeleteTCB>:
    /*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t *pxTCB )
    {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
      {
        /* The task can only have been allocated dynamically - free both
			the stack and TCB. */
        vPortFree( pxTCB->pxStack );
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fce5 	bl	8002024 <vPortFree>
        vPortFree( pxTCB );
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fce2 	bl	8002024 <vPortFree>
          configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
          mtCOVERAGE_TEST_MARKER();
        }
      }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
    /*-----------------------------------------------------------*/

    static void prvResetNextTaskUnblockTime( void )
    {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
      TCB_t *pxTCB;

      if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <prvResetNextTaskUnblockTime+0x38>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <prvResetNextTaskUnblockTime+0x1a>
      {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <prvResetNextTaskUnblockTime+0x3c>)
 800167a:	f04f 32ff 	mov.w	r2, #4294967295
 800167e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
        ( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
      }
    }
 8001680:	e008      	b.n	8001694 <prvResetNextTaskUnblockTime+0x2c>
        ( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <prvResetNextTaskUnblockTime+0x38>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <prvResetNextTaskUnblockTime+0x3c>)
 8001692:	6013      	str	r3, [r2, #0]
    }
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	200000c0 	.word	0x200000c0
 80016a4:	20000124 	.word	0x20000124

080016a8 <MsFreeRTOS_CreateTask>:

        uint32_t    MsPeriod           ,
        uint32_t    MsRelDeadLine      ,  /*Relative deadline*/
        uint32_t    MsWcet                /*Worst case execution time of task */
    )
    {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	80fb      	strh	r3, [r7, #6]
				  the TCB then the stack. */

      StackType_t *pxStack;

      /* Allocate space for the stack used by the task being created. */
      pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fbef 	bl	8001ea0 <pvPortMalloc>
 80016c2:	6178      	str	r0, [r7, #20]

      if( pxStack != NULL )
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00e      	beq.n	80016e8 <MsFreeRTOS_CreateTask+0x40>
      {
        /* Allocate space for the TCB. */
        pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80016ca:	207c      	movs	r0, #124	; 0x7c
 80016cc:	f000 fbe8 	bl	8001ea0 <pvPortMalloc>
 80016d0:	61f8      	str	r0, [r7, #28]

        if( pxNewTCB != NULL )
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <MsFreeRTOS_CreateTask+0x38>
        {
          /* Store the stack location in the TCB. */
          pxNewTCB->pxStack = pxStack;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58
 80016de:	e005      	b.n	80016ec <MsFreeRTOS_CreateTask+0x44>
        }
        else
        {
          /* The stack cannot be used as the TCB was not created.  Free
				     it again. */
          vPortFree( pxStack );
 80016e0:	6978      	ldr	r0, [r7, #20]
 80016e2:	f000 fc9f 	bl	8002024 <vPortFree>
 80016e6:	e001      	b.n	80016ec <MsFreeRTOS_CreateTask+0x44>
        }
      }
      else
      {
        pxNewTCB = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
      }


      if( pxNewTCB != NULL )
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d055      	beq.n	800179e <MsFreeRTOS_CreateTask+0xf6>
      {
        prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016f2:	88fa      	ldrh	r2, [r7, #6]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9303      	str	r3, [sp, #12]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fc65 	bl	8000fd8 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList( pxNewTCB );
 800170e:	69f8      	ldr	r0, [r7, #28]
 8001710:	f7ff fce8 	bl	80010e4 <prvAddNewTaskToReadyList>

        //
        pxNewTCB->MsPeriod        = MsPeriod     ;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001718:	605a      	str	r2, [r3, #4]
        pxNewTCB->MsRelDeadLine   = MsRelDeadLine;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171e:	60da      	str	r2, [r3, #12]
        pxNewTCB->MsWcet          = MsWcet       ;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001724:	611a      	str	r2, [r3, #16]
        pxNewTCB->MsEnable        = pdTRUE       ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	2201      	movs	r2, #1
 800172a:	771a      	strb	r2, [r3, #28]
        pxNewTCB->MsAbsDeadLine   = MsRelDeadLine;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001730:	609a      	str	r2, [r3, #8]
        pxNewTCB->MsID            = taskQnt ;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MsFreeRTOS_CreateTask+0x108>)
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	775a      	strb	r2, [r3, #29]
        pxNewTCB->MsNumberExecJob = 0            ;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
        pxNewTCB->MsNextWakeTime  = pxNewTCB->MsNumberExecJob*MsPeriod;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001746:	fb02 f203 	mul.w	r2, r2, r3
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	615a      	str	r2, [r3, #20]
        pxNewTCB->MsPriorityDeadline =  pxNewTCB->MsAbsDeadLine - pxNewTCB->MsWcet -xTickCount ;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MsFreeRTOS_CreateTask+0x10c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1ad2      	subs	r2, r2, r3
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

        pxNewTCB->MsCost    =  MsWcet;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001766:	629a      	str	r2, [r3, #40]	; 0x28


        MsArrayTCB[taskQnt++] = pxNewTCB;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MsFreeRTOS_CreateTask+0x108>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <MsFreeRTOS_CreateTask+0x108>)
 8001772:	7011      	strb	r1, [r2, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <MsFreeRTOS_CreateTask+0x110>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        TcbIndex = Ms_FindShortestDeadline();
 800177e:	f000 f81f 	bl	80017c0 <Ms_FindShortestDeadline>
 8001782:	4603      	mov	r3, r0
 8001784:	74fb      	strb	r3, [r7, #19]

        if(TcbIndex!=255)
 8001786:	7cfb      	ldrb	r3, [r7, #19]
 8001788:	2bff      	cmp	r3, #255	; 0xff
 800178a:	d005      	beq.n	8001798 <MsFreeRTOS_CreateTask+0xf0>
          pxCurrentTCB = MsArrayTCB[TcbIndex];
 800178c:	7cfb      	ldrb	r3, [r7, #19]
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <MsFreeRTOS_CreateTask+0x110>)
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <MsFreeRTOS_CreateTask+0x114>)
 8001796:	6013      	str	r3, [r2, #0]

        xReturn = pdPASS;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	e002      	b.n	80017a4 <MsFreeRTOS_CreateTask+0xfc>
      }
      else
      {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	61bb      	str	r3, [r7, #24]
      }

      return xReturn;
 80017a4:	69bb      	ldr	r3, [r7, #24]
    }
 80017a6:	4618      	mov	r0, r3
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000002c 	.word	0x2000002c
 80017b4:	2000010c 	.word	0x2000010c
 80017b8:	20005c68 	.word	0x20005c68
 80017bc:	20000030 	.word	0x20000030

080017c0 <Ms_FindShortestDeadline>:

//#define MS_GET_VALUE_DEADLINE(INDEX)  ( MsArrayTCB[INDEX]->MsPriorityDeadline)
#define MS_GET_VALUE_DEADLINE(INDEX)  ( MsArrayTCB[INDEX]->MsAbsDeadLine)

    uint8_t Ms_FindShortestDeadline(void)
    {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
      uint8_t index=255;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	71fb      	strb	r3, [r7, #7]

      for(uint8_t k = 0 ; k <taskQnt; k++ )
 80017ca:	2300      	movs	r3, #0
 80017cc:	71bb      	strb	r3, [r7, #6]
 80017ce:	e01d      	b.n	800180c <Ms_FindShortestDeadline+0x4c>
      {
        if ( MsArrayTCB[k]->MsEnable == pdTRUE)
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <Ms_FindShortestDeadline+0x78>)
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	7f1b      	ldrb	r3, [r3, #28]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d113      	bne.n	8001806 <Ms_FindShortestDeadline+0x46>
        {
          if(index == 0xff)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d102      	bne.n	80017ea <Ms_FindShortestDeadline+0x2a>
            index = k;
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e00d      	b.n	8001806 <Ms_FindShortestDeadline+0x46>
          else
          {
            if(MS_GET_VALUE_DEADLINE(k) < MS_GET_VALUE_DEADLINE(index))
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <Ms_FindShortestDeadline+0x78>)
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4910      	ldr	r1, [pc, #64]	; (8001838 <Ms_FindShortestDeadline+0x78>)
 80017f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d201      	bcs.n	8001806 <Ms_FindShortestDeadline+0x46>
              index = k;
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	71fb      	strb	r3, [r7, #7]
      for(uint8_t k = 0 ; k <taskQnt; k++ )
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	3301      	adds	r3, #1
 800180a:	71bb      	strb	r3, [r7, #6]
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <Ms_FindShortestDeadline+0x7c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	79ba      	ldrb	r2, [r7, #6]
 8001812:	429a      	cmp	r2, r3
 8001814:	d3dc      	bcc.n	80017d0 <Ms_FindShortestDeadline+0x10>
          }
        }
      }
      if(index == 0xff)
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d105      	bne.n	8001828 <Ms_FindShortestDeadline+0x68>
        pxCurrentTCB = pxReadyTasksLists[0].pxIndex->pxNext->pvOwner;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <Ms_FindShortestDeadline+0x80>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <Ms_FindShortestDeadline+0x84>)
 8001826:	6013      	str	r3, [r2, #0]

      return index;
 8001828:	79fb      	ldrb	r3, [r7, #7]
    }
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20005c68 	.word	0x20005c68
 800183c:	2000002c 	.word	0x2000002c
 8001840:	20000034 	.word	0x20000034
 8001844:	20000030 	.word	0x20000030

08001848 <Ms_EndJob_Exec>:

    void Ms_EndJob_Exec(void)
    {
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
      MsArrayTCB[ pxCurrentTCB->MsID ]->MsEnable       = pdFALSE;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <Ms_EndJob_Exec+0x78>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	7f5b      	ldrb	r3, [r3, #29]
 8001852:	461a      	mov	r2, r3
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <Ms_EndJob_Exec+0x7c>)
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	2200      	movs	r2, #0
 800185c:	771a      	strb	r2, [r3, #28]
      MsArrayTCB[ pxCurrentTCB->MsID ]->MsNumberExecJob++;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <Ms_EndJob_Exec+0x78>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	7f5b      	ldrb	r3, [r3, #29]
 8001864:	461a      	mov	r2, r3
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <Ms_EndJob_Exec+0x7c>)
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	3201      	adds	r2, #1
 8001870:	621a      	str	r2, [r3, #32]
      MsArrayTCB[ pxCurrentTCB->MsID ]->MsNextWakeTime  = MsArrayTCB[ pxCurrentTCB->MsID ]->MsNumberExecJob*MsArrayTCB[ pxCurrentTCB->MsID ]->MsPeriod;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <Ms_EndJob_Exec+0x78>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	7f5b      	ldrb	r3, [r3, #29]
 8001878:	461a      	mov	r2, r3
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <Ms_EndJob_Exec+0x7c>)
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <Ms_EndJob_Exec+0x78>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	7f5b      	ldrb	r3, [r3, #29]
 8001888:	4619      	mov	r1, r3
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <Ms_EndJob_Exec+0x7c>)
 800188c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <Ms_EndJob_Exec+0x78>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	7f5b      	ldrb	r3, [r3, #29]
 8001898:	4618      	mov	r0, r3
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <Ms_EndJob_Exec+0x7c>)
 800189c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80018a0:	fb01 f202 	mul.w	r2, r1, r2
 80018a4:	615a      	str	r2, [r3, #20]

//      Ms_InternalSched();

      portYIELD();
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <Ms_EndJob_Exec+0x80>)
 80018a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	f3bf 8f6f 	isb	sy
    }
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	20000030 	.word	0x20000030
 80018c4:	20005c68 	.word	0x20005c68
 80018c8:	e000ed04 	.word	0xe000ed04

080018cc <Ms_EnableTask>:

    uint8_t Ms_EnableTask(void)
    {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
      uint8_t r  = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
      for(uint8_t k = 0 ; k <taskQnt; k++ )
 80018d6:	2300      	movs	r3, #0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	e047      	b.n	800196c <Ms_EnableTask+0xa0>
      {
        if ( MsArrayTCB[k]->MsNextWakeTime <= xTickCount && MsArrayTCB[ k ]->MsEnable == pdFALSE)
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <Ms_EnableTask+0xb8>)
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <Ms_EnableTask+0xbc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d83b      	bhi.n	8001966 <Ms_EnableTask+0x9a>
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <Ms_EnableTask+0xb8>)
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d134      	bne.n	8001966 <Ms_EnableTask+0x9a>
        {
          MsArrayTCB[ k ]->MsEnable           =  pdTRUE;
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <Ms_EnableTask+0xb8>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	2201      	movs	r2, #1
 8001906:	771a      	strb	r2, [r3, #28]
          MsArrayTCB[ k ]->MsAbsDeadLine      =  MsArrayTCB[ k ]->MsNextWakeTime + MsArrayTCB[ k ]->MsRelDeadLine;
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <Ms_EnableTask+0xb8>)
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	6959      	ldr	r1, [r3, #20]
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <Ms_EnableTask+0xb8>)
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <Ms_EnableTask+0xb8>)
 8001920:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001924:	440a      	add	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
          MsArrayTCB[ k ]->MsPriorityDeadline =  MsArrayTCB[ k ]->MsAbsDeadLine - MsArrayTCB[ k ]->MsWcet -xTickCount ;
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <Ms_EnableTask+0xb8>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	4913      	ldr	r1, [pc, #76]	; (8001984 <Ms_EnableTask+0xb8>)
 8001936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	1ad1      	subs	r1, r2, r3
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <Ms_EnableTask+0xbc>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <Ms_EnableTask+0xb8>)
 8001946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800194a:	1a8a      	subs	r2, r1, r2
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
          MsArrayTCB[ k ]->MsCost =  MsArrayTCB[ k ]->MsCost ;
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <Ms_EnableTask+0xb8>)
 8001952:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	490a      	ldr	r1, [pc, #40]	; (8001984 <Ms_EnableTask+0xb8>)
 800195a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800195e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
          r = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
      for(uint8_t k = 0 ; k <taskQnt; k++ )
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	3301      	adds	r3, #1
 800196a:	71bb      	strb	r3, [r7, #6]
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <Ms_EnableTask+0xc0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	79ba      	ldrb	r2, [r7, #6]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3b2      	bcc.n	80018dc <Ms_EnableTask+0x10>
        }
      }
      return r;
 8001976:	79fb      	ldrb	r3, [r7, #7]
    }
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20005c68 	.word	0x20005c68
 8001988:	2000010c 	.word	0x2000010c
 800198c:	2000002c 	.word	0x2000002c

08001990 <Ms_UpdateDealine>:


    void Ms_UpdateDealine(void)
    {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
      for(uint8_t k = 0 ; k <taskQnt; k++ )
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e024      	b.n	80019e6 <Ms_UpdateDealine+0x56>
      {
        if ( MsArrayTCB[k]->MsEnable && pxCurrentTCB->MsID  !=k )
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <Ms_UpdateDealine+0x6c>)
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	7f1b      	ldrb	r3, [r3, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <Ms_UpdateDealine+0x34>
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <Ms_UpdateDealine+0x70>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	7f5b      	ldrb	r3, [r3, #29]
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d006      	beq.n	80019c4 <Ms_UpdateDealine+0x34>
//        if ( MsArrayTCB[k]->MsEnable )
          MsArrayTCB[ k ]->MsPriorityDeadline--;
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <Ms_UpdateDealine+0x6c>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	3a01      	subs	r2, #1
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

        if (MsArrayTCB[k]->MsPriorityDeadline > 16000)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <Ms_UpdateDealine+0x6c>)
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019d2:	d905      	bls.n	80019e0 <Ms_UpdateDealine+0x50>
          MsArrayTCB[k]->MsPriorityDeadline = 0;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <Ms_UpdateDealine+0x6c>)
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
      for(uint8_t k = 0 ; k <taskQnt; k++ )
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	3301      	adds	r3, #1
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <Ms_UpdateDealine+0x74>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3d5      	bcc.n	800199c <Ms_UpdateDealine+0xc>

      }

    }
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20005c68 	.word	0x20005c68
 8001a00:	20000030 	.word	0x20000030
 8001a04:	2000002c 	.word	0x2000002c

08001a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3b04      	subs	r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b04      	subs	r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f023 0201 	bic.w	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3b04      	subs	r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <pxPortInitialiseStack+0x64>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3b14      	subs	r3, #20
 8001a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3b04      	subs	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f06f 0202 	mvn.w	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3b20      	subs	r3, #32
 8001a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	08001a71 	.word	0x08001a71

08001a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <prvTaskExitError+0x50>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d009      	beq.n	8001a98 <prvTaskExitError+0x28>
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e7fe      	b.n	8001a96 <prvTaskExitError+0x26>
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001aaa:	bf00      	nop
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0fc      	beq.n	8001aac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
	...

08001ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <pxCurrentTCBConst2>)
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	6808      	ldr	r0, [r1, #0]
 8001ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ada:	f380 8809 	msr	PSP, r0
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f380 8811 	msr	BASEPRI, r0
 8001aea:	4770      	bx	lr
 8001aec:	f3af 8000 	nop.w

08001af0 <pxCurrentTCBConst2>:
 8001af0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop

08001af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <prvPortStartFirstTask+0x24>)
 8001afa:	6800      	ldr	r0, [r0, #0]
 8001afc:	6800      	ldr	r0, [r0, #0]
 8001afe:	f380 8808 	msr	MSP, r0
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f380 8814 	msr	CONTROL, r0
 8001b0a:	b662      	cpsie	i
 8001b0c:	b661      	cpsie	f
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	df00      	svc	0
 8001b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001b1a:	bf00      	nop
 8001b1c:	e000ed08 	.word	0xe000ed08

08001b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b26:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <xPortStartScheduler+0x138>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <xPortStartScheduler+0x13c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d109      	bne.n	8001b44 <xPortStartScheduler+0x24>
 8001b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b34:	f383 8811 	msr	BASEPRI, r3
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	f3bf 8f4f 	dsb	sy
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e7fe      	b.n	8001b42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <xPortStartScheduler+0x138>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <xPortStartScheduler+0x140>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d109      	bne.n	8001b62 <xPortStartScheduler+0x42>
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e7fe      	b.n	8001b60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <xPortStartScheduler+0x144>)
 8001b64:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	22ff      	movs	r2, #255	; 0xff
 8001b72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <xPortStartScheduler+0x148>)
 8001b88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b90:	e009      	b.n	8001ba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001b9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	d0ef      	beq.n	8001b92 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d009      	beq.n	8001bd2 <xPortStartScheduler+0xb2>
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e7fe      	b.n	8001bd0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d009      	beq.n	8001bf2 <xPortStartScheduler+0xd2>
 8001bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e7fe      	b.n	8001bf0 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <xPortStartScheduler+0x14c>)
 8001c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <xPortStartScheduler+0x150>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a16      	ldr	r2, [pc, #88]	; (8001c70 <xPortStartScheduler+0x150>)
 8001c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <xPortStartScheduler+0x150>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <xPortStartScheduler+0x150>)
 8001c22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001c28:	f000 f8d6 	bl	8001dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <xPortStartScheduler+0x154>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001c32:	f000 f8ed 	bl	8001e10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <xPortStartScheduler+0x158>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <xPortStartScheduler+0x158>)
 8001c3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001c42:	f7ff ff59 	bl	8001af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001c46:	f7ff fc37 	bl	80014b8 <vTaskSwitchContext>
	prvTaskExitError();
 8001c4a:	f7ff ff11 	bl	8001a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	410fc271 	.word	0x410fc271
 8001c60:	410fc270 	.word	0x410fc270
 8001c64:	e000e400 	.word	0xe000e400
 8001c68:	20000130 	.word	0x20000130
 8001c6c:	20000134 	.word	0x20000134
 8001c70:	e000ed20 	.word	0xe000ed20
 8001c74:	20000008 	.word	0x20000008
 8001c78:	e000ef34 	.word	0xe000ef34

08001c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <vPortEnterCritical+0x54>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <vPortEnterCritical+0x54>)
 8001c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <vPortEnterCritical+0x54>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10e      	bne.n	8001cc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <vPortEnterCritical+0x58>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <vPortEnterCritical+0x48>
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	e7fe      	b.n	8001cc2 <vPortEnterCritical+0x46>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	e000ed04 	.word	0xe000ed04

08001cd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <vPortExitCritical+0x4c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <vPortExitCritical+0x22>
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e7fe      	b.n	8001cf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <vPortExitCritical+0x4c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <vPortExitCritical+0x4c>)
 8001d02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <vPortExitCritical+0x4c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d104      	bne.n	8001d16 <vPortExitCritical+0x3e>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
	...

08001d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001d30:	f3ef 8009 	mrs	r0, PSP
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <pxCurrentTCBConst>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f01e 0f10 	tst.w	lr, #16
 8001d40:	bf08      	it	eq
 8001d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d4a:	6010      	str	r0, [r2, #0]
 8001d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d54:	f380 8811 	msr	BASEPRI, r0
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f7ff fbaa 	bl	80014b8 <vTaskSwitchContext>
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f380 8811 	msr	BASEPRI, r0
 8001d6c:	bc09      	pop	{r0, r3}
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	6808      	ldr	r0, [r1, #0]
 8001d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d76:	f01e 0f10 	tst.w	lr, #16
 8001d7a:	bf08      	it	eq
 8001d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001d80:	f380 8809 	msr	PSP, r0
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	f3af 8000 	nop.w

08001d90 <pxCurrentTCBConst>:
 8001d90:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop

08001d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001db0:	f7ff fb36 	bl	8001420 <xTaskIncrementTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SysTick_Handler+0x3c>)
 8001dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e000ed04 	.word	0xe000ed04

08001dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <vPortSetupTimerInterrupt+0x28>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <vPortSetupTimerInterrupt+0x2c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <vPortSetupTimerInterrupt+0x30>)
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <vPortSetupTimerInterrupt+0x34>)
 8001dec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <vPortSetupTimerInterrupt+0x28>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010
 8001e04:	e000e018 	.word	0xe000e018
 8001e08:	e000e014 	.word	0xe000e014
 8001e0c:	0002903f 	.word	0x0002903f

08001e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e20 <vPortEnableVFP+0x10>
 8001e14:	6801      	ldr	r1, [r0, #0]
 8001e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e1a:	6001      	str	r1, [r0, #0]
 8001e1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001e1e:	bf00      	nop
 8001e20:	e000ed88 	.word	0xe000ed88

08001e24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001e2a:	f3ef 8305 	mrs	r3, IPSR
 8001e2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	d913      	bls.n	8001e5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <vPortValidateInterruptPriority+0x6c>)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <vPortValidateInterruptPriority+0x70>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	7afa      	ldrb	r2, [r7, #11]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d209      	bcs.n	8001e5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e7fe      	b.n	8001e5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <vPortValidateInterruptPriority+0x74>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <vPortValidateInterruptPriority+0x78>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d909      	bls.n	8001e82 <vPortValidateInterruptPriority+0x5e>
 8001e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e7fe      	b.n	8001e80 <vPortValidateInterruptPriority+0x5c>
	}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e3f0 	.word	0xe000e3f0
 8001e94:	20000130 	.word	0x20000130
 8001e98:	e000ed0c 	.word	0xe000ed0c
 8001e9c:	20000134 	.word	0x20000134

08001ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001eac:	f7ff f9f8 	bl	80012a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <pvPortMalloc+0x170>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001eb8:	f000 f90c 	bl	80020d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <pvPortMalloc+0x174>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 808c 	bne.w	8001fe2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01c      	beq.n	8001f0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f023 0307 	bic.w	r3, r3, #7
 8001ee8:	3308      	adds	r3, #8
 8001eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <pvPortMalloc+0x6a>
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e7fe      	b.n	8001f08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d068      	beq.n	8001fe2 <pvPortMalloc+0x142>
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <pvPortMalloc+0x178>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d863      	bhi.n	8001fe2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <pvPortMalloc+0x17c>)
 8001f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <pvPortMalloc+0x17c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f24:	e004      	b.n	8001f30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d903      	bls.n	8001f42 <pvPortMalloc+0xa2>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f1      	bne.n	8001f26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <pvPortMalloc+0x170>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d04a      	beq.n	8001fe2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	4413      	add	r3, r2
 8001f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	2308      	movs	r3, #8
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d91e      	bls.n	8001fac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <pvPortMalloc+0xf4>
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e7fe      	b.n	8001f92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad2      	subs	r2, r2, r3
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f000 f8f6 	bl	8002198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <pvPortMalloc+0x178>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <pvPortMalloc+0x178>)
 8001fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <pvPortMalloc+0x178>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <pvPortMalloc+0x180>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d203      	bcs.n	8001fce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <pvPortMalloc+0x178>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <pvPortMalloc+0x180>)
 8001fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <pvPortMalloc+0x174>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001fe2:	f7ff f96b 	bl	80012bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <pvPortMalloc+0x164>
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e7fe      	b.n	8002002 <pvPortMalloc+0x162>
	return pvReturn;
 8002004:	69fb      	ldr	r3, [r7, #28]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20005140 	.word	0x20005140
 8002014:	2000514c 	.word	0x2000514c
 8002018:	20005144 	.word	0x20005144
 800201c:	20005138 	.word	0x20005138
 8002020:	20005148 	.word	0x20005148

08002024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d046      	beq.n	80020c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002036:	2308      	movs	r3, #8
 8002038:	425b      	negs	r3, r3
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4413      	add	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <vPortFree+0xa8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <vPortFree+0x42>
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e7fe      	b.n	8002064 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <vPortFree+0x5e>
 800206e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002072:	f383 8811 	msr	BASEPRI, r3
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	e7fe      	b.n	8002080 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <vPortFree+0xa8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d019      	beq.n	80020c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d115      	bne.n	80020c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <vPortFree+0xa8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80020a8:	f7ff f8fa 	bl	80012a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <vPortFree+0xac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <vPortFree+0xac>)
 80020b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020ba:	6938      	ldr	r0, [r7, #16]
 80020bc:	f000 f86c 	bl	8002198 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80020c0:	f7ff f8fc 	bl	80012bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000514c 	.word	0x2000514c
 80020d0:	20005144 	.word	0x20005144

080020d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80020de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <prvHeapInit+0xac>)
 80020e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3307      	adds	r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0307 	bic.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <prvHeapInit+0xac>)
 8002104:	4413      	add	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <prvHeapInit+0xb0>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <prvHeapInit+0xb0>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002120:	2208      	movs	r2, #8
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <prvHeapInit+0xb4>)
 8002134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <prvHeapInit+0xb4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <prvHeapInit+0xb4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <prvHeapInit+0xb4>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <prvHeapInit+0xb8>)
 8002162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <prvHeapInit+0xbc>)
 800216a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <prvHeapInit+0xc0>)
 800216e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000138 	.word	0x20000138
 8002184:	20005138 	.word	0x20005138
 8002188:	20005140 	.word	0x20005140
 800218c:	20005148 	.word	0x20005148
 8002190:	20005144 	.word	0x20005144
 8002194:	2000514c 	.word	0x2000514c

08002198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <prvInsertBlockIntoFreeList+0xac>)
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e002      	b.n	80021ac <prvInsertBlockIntoFreeList+0x14>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d8f7      	bhi.n	80021a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d108      	bne.n	80021da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	441a      	add	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	441a      	add	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d118      	bne.n	8002220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <prvInsertBlockIntoFreeList+0xb0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d00d      	beq.n	8002216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e008      	b.n	8002228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <prvInsertBlockIntoFreeList+0xb0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e003      	b.n	8002228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d002      	beq.n	8002236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20005138 	.word	0x20005138
 8002248:	20005140 	.word	0x20005140

0800224c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <_DoInit+0x8c>)
 8002254:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2203      	movs	r2, #3
 8002260:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <_DoInit+0x90>)
 8002266:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <_DoInit+0x94>)
 800226c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002274:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_DoInit+0x90>)
 800228c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <_DoInit+0x98>)
 8002292:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2210      	movs	r2, #16
 8002298:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3307      	adds	r3, #7
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <_DoInit+0x9c>)
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <_DoInit+0xa0>)
 80022ba:	6810      	ldr	r0, [r2, #0]
 80022bc:	6018      	str	r0, [r3, #0]
 80022be:	8891      	ldrh	r1, [r2, #4]
 80022c0:	7992      	ldrb	r2, [r2, #6]
 80022c2:	8099      	strh	r1, [r3, #4]
 80022c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	719a      	strb	r2, [r3, #6]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20005c94 	.word	0x20005c94
 80022dc:	08003ca0 	.word	0x08003ca0
 80022e0:	20005150 	.word	0x20005150
 80022e4:	20005550 	.word	0x20005550
 80022e8:	08003cac 	.word	0x08003cac
 80022ec:	08003cb0 	.word	0x08003cb0

080022f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80022fc:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <SEGGER_RTT_ReadNoLock+0x100>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <SEGGER_RTT_ReadNoLock+0x18>
 8002304:	f7ff ffa2 	bl	800224c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <SEGGER_RTT_ReadNoLock+0x100>)
 8002316:	4413      	add	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	429a      	cmp	r2, r3
 8002334:	d92a      	bls.n	800238c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4293      	cmp	r3, r2
 8002346:	bf28      	it	cs
 8002348:	4613      	movcs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	4413      	add	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4619      	mov	r1, r3
 8002358:	69f8      	ldr	r0, [r7, #28]
 800235a:	f001 fc7e 	bl	8003c5a <memcpy>
    NumBytesRead += NumBytesRem;
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002376:	6a3a      	ldr	r2, [r7, #32]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	6a3a      	ldr	r2, [r7, #32]
 8002384:	429a      	cmp	r2, r3
 8002386:	d101      	bne.n	800238c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4293      	cmp	r3, r2
 800239a:	bf28      	it	cs
 800239c:	4613      	movcs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d018      	beq.n	80023d8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4619      	mov	r1, r3
 80023b2:	69f8      	ldr	r0, [r7, #28]
 80023b4:	f001 fc51 	bl	8003c5a <memcpy>
    NumBytesRead += NumBytesRem;
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20005c94 	.word	0x20005c94

080023f4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002412:	4413      	add	r3, r2
 8002414:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	429a      	cmp	r2, r3
 8002428:	d854      	bhi.n	80024d4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d30f      	bcc.n	800245e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fc05 	bl	8003c5a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	441a      	add	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e054      	b.n	8002508 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d34b      	bcc.n	8002506 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d90e      	bls.n	800249e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fbe4 	bl	8003c5a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	441a      	add	r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	e018      	b.n	80024d0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fbd5 	bl	8003c5a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	6858      	ldr	r0, [r3, #4]
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	18d1      	adds	r1, r2, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	f001 fbca 	bl	8003c5a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e019      	b.n	8002508 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d30f      	bcc.n	8002506 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fbb1 	bl	8003c5a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	441a      	add	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20005c94 	.word	0x20005c94

08002514 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800252a:	f7ff fe8f 	bl	800224c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4293      	cmp	r3, r2
 8002538:	d24c      	bcs.n	80025d4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800253a:	f3ef 8311 	mrs	r3, BASEPRI
 800253e:	f04f 0120 	mov.w	r1, #32
 8002542:	f381 8811 	msr	BASEPRI, r1
 8002546:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d032      	beq.n	80025b4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800254e:	4925      	ldr	r1, [pc, #148]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002562:	4920      	ldr	r1, [pc, #128]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3304      	adds	r3, #4
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002578:	491a      	ldr	r1, [pc, #104]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3320      	adds	r3, #32
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800258c:	4915      	ldr	r1, [pc, #84]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3328      	adds	r3, #40	; 0x28
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80025a0:	4910      	ldr	r1, [pc, #64]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3324      	adds	r3, #36	; 0x24
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80025b4:	490b      	ldr	r1, [pc, #44]	; (80025e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	332c      	adds	r3, #44	; 0x2c
 80025c4:	6a3a      	ldr	r2, [r7, #32]
 80025c6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e002      	b.n	80025da <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80025da:	697b      	ldr	r3, [r7, #20]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20005c94 	.word	0x20005c94

080025e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80025fe:	f7ff fe25 	bl	800224c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4293      	cmp	r3, r2
 800260c:	d24b      	bcs.n	80026a6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800260e:	f3ef 8311 	mrs	r3, BASEPRI
 8002612:	f04f 0120 	mov.w	r1, #32
 8002616:	f381 8811 	msr	BASEPRI, r1
 800261a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d031      	beq.n	8002686 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002622:	4925      	ldr	r1, [pc, #148]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002636:	4920      	ldr	r1, [pc, #128]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3364      	adds	r3, #100	; 0x64
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800264a:	491b      	ldr	r1, [pc, #108]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3368      	adds	r3, #104	; 0x68
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800265e:	4916      	ldr	r1, [pc, #88]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3370      	adds	r3, #112	; 0x70
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002672:	4911      	ldr	r1, [pc, #68]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	336c      	adds	r3, #108	; 0x6c
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002686:	490c      	ldr	r1, [pc, #48]	; (80026b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3374      	adds	r3, #116	; 0x74
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e002      	b.n	80026ac <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	617b      	str	r3, [r7, #20]
  }
  return r;
 80026ac:	697b      	ldr	r3, [r7, #20]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20005c94 	.word	0x20005c94

080026bc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026cc:	e002      	b.n	80026d4 <_EncodeStr+0x18>
    Len++;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	3301      	adds	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f6      	bne.n	80026ce <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d901      	bls.n	80026ec <_EncodeStr+0x30>
    Len = Limit;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2bfe      	cmp	r3, #254	; 0xfe
 80026f0:	d806      	bhi.n	8002700 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e011      	b.n	8002724 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	60fa      	str	r2, [r7, #12]
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	60fa      	str	r2, [r7, #12]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	0a19      	lsrs	r1, r3, #8
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002728:	e00a      	b.n	8002740 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	1c53      	adds	r3, r2, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	60f9      	str	r1, [r7, #12]
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	701a      	strb	r2, [r3, #0]
    n++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3f0      	bcc.n	800272a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002774:	1cfb      	adds	r3, r7, #3
 8002776:	2201      	movs	r2, #1
 8002778:	4619      	mov	r1, r3
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fdb8 	bl	80022f0 <SEGGER_RTT_ReadNoLock>
 8002780:	4603      	mov	r3, r0
 8002782:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	dd44      	ble.n	8002814 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d01a      	beq.n	80027c6 <_HandleIncomingPacket+0x58>
 8002790:	2b04      	cmp	r3, #4
 8002792:	dc06      	bgt.n	80027a2 <_HandleIncomingPacket+0x34>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d010      	beq.n	80027ba <_HandleIncomingPacket+0x4c>
 8002798:	2b02      	cmp	r3, #2
 800279a:	dc11      	bgt.n	80027c0 <_HandleIncomingPacket+0x52>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d009      	beq.n	80027b4 <_HandleIncomingPacket+0x46>
 80027a0:	e02d      	b.n	80027fe <_HandleIncomingPacket+0x90>
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d015      	beq.n	80027d2 <_HandleIncomingPacket+0x64>
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	db10      	blt.n	80027cc <_HandleIncomingPacket+0x5e>
 80027aa:	2b07      	cmp	r3, #7
 80027ac:	d014      	beq.n	80027d8 <_HandleIncomingPacket+0x6a>
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d015      	beq.n	80027de <_HandleIncomingPacket+0x70>
 80027b2:	e024      	b.n	80027fe <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80027b4:	f000 fa7e 	bl	8002cb4 <SEGGER_SYSVIEW_Start>
      break;
 80027b8:	e031      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80027ba:	f000 fb37 	bl	8002e2c <SEGGER_SYSVIEW_Stop>
      break;
 80027be:	e02e      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80027c0:	f000 fd12 	bl	80031e8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80027c4:	e02b      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80027c6:	f000 fcd7 	bl	8003178 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027ca:	e028      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027cc:	f000 fb54 	bl	8002e78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80027d0:	e025      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80027d2:	f000 febf 	bl	8003554 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80027d6:	e022      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80027d8:	f000 fe9e 	bl	8003518 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80027dc:	e01f      	b.n	800281e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	2201      	movs	r2, #1
 80027e2:	4619      	mov	r1, r3
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff fd83 	bl	80022f0 <SEGGER_RTT_ReadNoLock>
 80027ea:	4603      	mov	r3, r0
 80027ec:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dd11      	ble.n	8002818 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fe0e 	bl	8003418 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80027fc:	e00c      	b.n	8002818 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	b25b      	sxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	da0a      	bge.n	800281c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002806:	1cfb      	adds	r3, r7, #3
 8002808:	2201      	movs	r2, #1
 800280a:	4619      	mov	r1, r3
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff fd6f 	bl	80022f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002812:	e003      	b.n	800281c <_HandleIncomingPacket+0xae>
    }
  }
 8002814:	bf00      	nop
 8002816:	e002      	b.n	800281e <_HandleIncomingPacket+0xb0>
      break;
 8002818:	bf00      	nop
 800281a:	e000      	b.n	800281e <_HandleIncomingPacket+0xb0>
      break;
 800281c:	bf00      	nop
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800282e:	2301      	movs	r3, #1
 8002830:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
 8002842:	e00b      	b.n	800285c <_TrySendOverflowPacket+0x34>
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	b2da      	uxtb	r2, r3
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	1c59      	adds	r1, r3, #1
 800284c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800284e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	09db      	lsrs	r3, r3, #7
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b7f      	cmp	r3, #127	; 0x7f
 8002860:	d8f0      	bhi.n	8002844 <_TrySendOverflowPacket+0x1c>
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <_TrySendOverflowPacket+0xdc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	e00b      	b.n	80028a4 <_TrySendOverflowPacket+0x7c>
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1c59      	adds	r1, r3, #1
 8002894:	6279      	str	r1, [r7, #36]	; 0x24
 8002896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	09db      	lsrs	r3, r3, #7
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b7f      	cmp	r3, #127	; 0x7f
 80028a8:	d8f0      	bhi.n	800288c <_TrySendOverflowPacket+0x64>
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	627a      	str	r2, [r7, #36]	; 0x24
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff fd94 	bl	80023f4 <SEGGER_RTT_WriteSkipNoLock>
 80028cc:	4603      	mov	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]
  if (Status) {
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e004      	b.n	80028f4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <_TrySendOverflowPacket+0xd8>)
 80028f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80028f4:	693b      	ldr	r3, [r7, #16]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20005968 	.word	0x20005968
 8002904:	e0001004 	.word	0xe0001004

08002908 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002914:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <_SendPacket+0x19c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d010      	beq.n	800293e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <_SendPacket+0x19c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a1 	beq.w	8002a68 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <_SendPacket+0x19c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d109      	bne.n	8002942 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800292e:	f7ff ff7b 	bl	8002828 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <_SendPacket+0x19c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	f040 8098 	bne.w	8002a6c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800293c:	e001      	b.n	8002942 <_SendPacket+0x3a>
    goto Send;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <_SendPacket+0x3c>
Send:
 8002942:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b1f      	cmp	r3, #31
 8002948:	d809      	bhi.n	800295e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800294a:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <_SendPacket+0x19c>)
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 8089 	bne.w	8002a70 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b17      	cmp	r3, #23
 8002962:	d807      	bhi.n	8002974 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3b01      	subs	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e03d      	b.n	80029f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b7f      	cmp	r3, #127	; 0x7f
 8002980:	d912      	bls.n	80029a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	09da      	lsrs	r2, r3, #7
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	3a01      	subs	r2, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e006      	b.n	80029b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b7f      	cmp	r3, #127	; 0x7f
 80029ba:	d912      	bls.n	80029e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	09da      	lsrs	r2, r3, #7
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	3a01      	subs	r2, #1
 80029d4:	60fa      	str	r2, [r7, #12]
 80029d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e006      	b.n	80029f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <_SendPacket+0x1a0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <_SendPacket+0x19c>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	e00b      	b.n	8002a22 <_SendPacket+0x11a>
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	6279      	str	r1, [r7, #36]	; 0x24
 8002a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	09db      	lsrs	r3, r3, #7
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2b7f      	cmp	r3, #127	; 0x7f
 8002a26:	d8f0      	bhi.n	8002a0a <_SendPacket+0x102>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fcd6 	bl	80023f4 <SEGGER_RTT_WriteSkipNoLock>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <_SendPacket+0x19c>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	60d3      	str	r3, [r2, #12]
 8002a58:	e00b      	b.n	8002a72 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_SendPacket+0x19c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_SendPacket+0x19c>)
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e004      	b.n	8002a72 <_SendPacket+0x16a>
    goto SendDone;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <_SendPacket+0x16a>
      goto SendDone;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <_SendPacket+0x16a>
      goto SendDone;
 8002a70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <_SendPacket+0x1a4>)
 8002a74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <_SendPacket+0x1a4>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d00b      	beq.n	8002a9a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <_SendPacket+0x19c>)
 8002a84:	789b      	ldrb	r3, [r3, #2]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_SendPacket+0x19c>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a90:	f7ff fe6d 	bl	800276e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <_SendPacket+0x19c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20005968 	.word	0x20005968
 8002aa8:	e0001004 	.word	0xe0001004
 8002aac:	20005c94 	.word	0x20005c94

08002ab0 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac6:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <SEGGER_SYSVIEW_Init+0x68>)
 8002ac8:	4914      	ldr	r1, [pc, #80]	; (8002b1c <SEGGER_SYSVIEW_Init+0x6c>)
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7ff fd22 	bl	8002514 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <SEGGER_SYSVIEW_Init+0x70>)
 8002ad8:	4910      	ldr	r1, [pc, #64]	; (8002b1c <SEGGER_SYSVIEW_Init+0x6c>)
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7ff fd84 	bl	80025e8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <SEGGER_SYSVIEW_Init+0x78>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002aee:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <SEGGER_SYSVIEW_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20005560 	.word	0x20005560
 8002b1c:	08003cb8 	.word	0x08003cb8
 8002b20:	20005960 	.word	0x20005960
 8002b24:	20005968 	.word	0x20005968
 8002b28:	e0001004 	.word	0xe0001004

08002b2c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6113      	str	r3, [r2, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20005968 	.word	0x20005968

08002b4c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b54:	f3ef 8311 	mrs	r3, BASEPRI
 8002b58:	f04f 0120 	mov.w	r1, #32
 8002b5c:	f381 8811 	msr	BASEPRI, r1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4808      	ldr	r0, [pc, #32]	; (8002b84 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002b64:	f7ff fdf7 	bl	8002756 <_PreparePacket>
 8002b68:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68b8      	ldr	r0, [r7, #8]
 8002b70:	f7ff feca 	bl	8002908 <_SendPacket>
  RECORD_END();
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f383 8811 	msr	BASEPRI, r3
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20005998 	.word	0x20005998

08002b88 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b92:	f3ef 8311 	mrs	r3, BASEPRI
 8002b96:	f04f 0120 	mov.w	r1, #32
 8002b9a:	f381 8811 	msr	BASEPRI, r1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	4816      	ldr	r0, [pc, #88]	; (8002bfc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002ba2:	f7ff fdd8 	bl	8002756 <_PreparePacket>
 8002ba6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e00b      	b.n	8002bce <SEGGER_SYSVIEW_RecordU32+0x46>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1c59      	adds	r1, r3, #1
 8002bbe:	61f9      	str	r1, [r7, #28]
 8002bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	09db      	lsrs	r3, r3, #7
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd2:	d8f0      	bhi.n	8002bb6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	61fa      	str	r2, [r7, #28]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	6938      	ldr	r0, [r7, #16]
 8002bea:	f7ff fe8d 	bl	8002908 <_SendPacket>
  RECORD_END();
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f383 8811 	msr	BASEPRI, r3
}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20005998 	.word	0x20005998

08002c00 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c10:	f04f 0120 	mov.w	r1, #32
 8002c14:	f381 8811 	msr	BASEPRI, r1
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	4825      	ldr	r0, [pc, #148]	; (8002cb0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002c1c:	f7ff fd9b 	bl	8002756 <_PreparePacket>
 8002c20:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2e:	e00b      	b.n	8002c48 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	09db      	lsrs	r3, r3, #7
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4c:	d8f0      	bhi.n	8002c30 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	e00b      	b.n	8002c80 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	1c59      	adds	r1, r3, #1
 8002c70:	6279      	str	r1, [r7, #36]	; 0x24
 8002c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	09db      	lsrs	r3, r3, #7
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b7f      	cmp	r3, #127	; 0x7f
 8002c84:	d8f0      	bhi.n	8002c68 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	69b8      	ldr	r0, [r7, #24]
 8002c9c:	f7ff fe34 	bl	8002908 <_SendPacket>
  RECORD_END();
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f383 8811 	msr	BASEPRI, r3
}
 8002ca6:	bf00      	nop
 8002ca8:	3730      	adds	r7, #48	; 0x30
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20005998 	.word	0x20005998

08002cb4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002cba:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80aa 	bne.w	8002e18 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002cca:	f3ef 8311 	mrs	r3, BASEPRI
 8002cce:	f04f 0120 	mov.w	r1, #32
 8002cd2:	f381 8811 	msr	BASEPRI, r1
 8002cd6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002cd8:	220a      	movs	r2, #10
 8002cda:	4952      	ldr	r1, [pc, #328]	; (8002e24 <SEGGER_SYSVIEW_Start+0x170>)
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7ff fb89 	bl	80023f4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002ce8:	200a      	movs	r0, #10
 8002cea:	f7ff ff2f 	bl	8002b4c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002cee:	f3ef 8311 	mrs	r3, BASEPRI
 8002cf2:	f04f 0120 	mov.w	r1, #32
 8002cf6:	f381 8811 	msr	BASEPRI, r1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	484a      	ldr	r0, [pc, #296]	; (8002e28 <SEGGER_SYSVIEW_Start+0x174>)
 8002cfe:	f7ff fd2a 	bl	8002756 <_PreparePacket>
 8002d02:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0c:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d12:	e00b      	b.n	8002d2c <SEGGER_SYSVIEW_Start+0x78>
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	09db      	lsrs	r3, r3, #7
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d30:	d8f0      	bhi.n	8002d14 <SEGGER_SYSVIEW_Start+0x60>
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	e00b      	b.n	8002d66 <SEGGER_SYSVIEW_Start+0xb2>
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1c59      	adds	r1, r3, #1
 8002d56:	6279      	str	r1, [r7, #36]	; 0x24
 8002d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	09db      	lsrs	r3, r3, #7
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b7f      	cmp	r3, #127	; 0x7f
 8002d6a:	d8f0      	bhi.n	8002d4e <SEGGER_SYSVIEW_Start+0x9a>
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	627a      	str	r2, [r7, #36]	; 0x24
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e00b      	b.n	8002da0 <SEGGER_SYSVIEW_Start+0xec>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	61f9      	str	r1, [r7, #28]
 8002d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	09db      	lsrs	r3, r3, #7
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b7f      	cmp	r3, #127	; 0x7f
 8002da4:	d8f0      	bhi.n	8002d88 <SEGGER_SYSVIEW_Start+0xd4>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	61fa      	str	r2, [r7, #28]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e00b      	b.n	8002dd8 <SEGGER_SYSVIEW_Start+0x124>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	6179      	str	r1, [r7, #20]
 8002dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	09db      	lsrs	r3, r3, #7
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b7f      	cmp	r3, #127	; 0x7f
 8002ddc:	d8f0      	bhi.n	8002dc0 <SEGGER_SYSVIEW_Start+0x10c>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	617a      	str	r2, [r7, #20]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002dee:	2218      	movs	r2, #24
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fd88 	bl	8002908 <_SendPacket>
      RECORD_END();
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002e0c:	f000 f9ec 	bl	80031e8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002e10:	f000 f9b2 	bl	8003178 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002e14:	f000 fb9e 	bl	8003554 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3730      	adds	r7, #48	; 0x30
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20005968 	.word	0x20005968
 8002e24:	08003d74 	.word	0x08003d74
 8002e28:	20005998 	.word	0x20005998

08002e2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e32:	f3ef 8311 	mrs	r3, BASEPRI
 8002e36:	f04f 0120 	mov.w	r1, #32
 8002e3a:	f381 8811 	msr	BASEPRI, r1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	480b      	ldr	r0, [pc, #44]	; (8002e70 <SEGGER_SYSVIEW_Stop+0x44>)
 8002e42:	f7ff fc88 	bl	8002756 <_PreparePacket>
 8002e46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002e50:	220b      	movs	r2, #11
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	f7ff fd57 	bl	8002908 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f383 8811 	msr	BASEPRI, r3
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20005998 	.word	0x20005998
 8002e74:	20005968 	.word	0x20005968

08002e78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e82:	f04f 0120 	mov.w	r1, #32
 8002e86:	f381 8811 	msr	BASEPRI, r1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	4845      	ldr	r0, [pc, #276]	; (8002fa4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002e8e:	f7ff fc62 	bl	8002756 <_PreparePacket>
 8002e92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea2:	e00b      	b.n	8002ebc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	09db      	lsrs	r3, r3, #7
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec0:	d8f0      	bhi.n	8002ea4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	e00b      	b.n	8002ef6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	6279      	str	r1, [r7, #36]	; 0x24
 8002ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	09db      	lsrs	r3, r3, #7
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8002efa:	d8f0      	bhi.n	8002ede <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	627a      	str	r2, [r7, #36]	; 0x24
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e00b      	b.n	8002f30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	61f9      	str	r1, [r7, #28]
 8002f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	09db      	lsrs	r3, r3, #7
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b7f      	cmp	r3, #127	; 0x7f
 8002f34:	d8f0      	bhi.n	8002f18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	61fa      	str	r2, [r7, #28]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e00b      	b.n	8002f68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	6179      	str	r1, [r7, #20]
 8002f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	09db      	lsrs	r3, r3, #7
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f6c:	d8f0      	bhi.n	8002f50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	617a      	str	r2, [r7, #20]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002f7e:	2218      	movs	r2, #24
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f7ff fcc0 	bl	8002908 <_SendPacket>
  RECORD_END();
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	4798      	blx	r3
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3730      	adds	r7, #48	; 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20005998 	.word	0x20005998
 8002fa8:	20005968 	.word	0x20005968

08002fac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b092      	sub	sp, #72	; 0x48
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb8:	f04f 0120 	mov.w	r1, #32
 8002fbc:	f381 8811 	msr	BASEPRI, r1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	486b      	ldr	r0, [pc, #428]	; (8003170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002fc4:	f7ff fbc7 	bl	8002756 <_PreparePacket>
 8002fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe0:	e00b      	b.n	8002ffa <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	1c59      	adds	r1, r3, #1
 8002fea:	6479      	str	r1, [r7, #68]	; 0x44
 8002fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	09db      	lsrs	r3, r3, #7
 8002ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffe:	d8f0      	bhi.n	8002fe2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	647a      	str	r2, [r7, #68]	; 0x44
 8003006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
 800301a:	e00b      	b.n	8003034 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	b2da      	uxtb	r2, r3
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	09db      	lsrs	r3, r3, #7
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	2b7f      	cmp	r3, #127	; 0x7f
 8003038:	d8f0      	bhi.n	800301c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003048:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	4619      	mov	r1, r3
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fb32 	bl	80026bc <_EncodeStr>
 8003058:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800305a:	2209      	movs	r2, #9
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	6938      	ldr	r0, [r7, #16]
 8003060:	f7ff fc52 	bl	8002908 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b40      	ldr	r3, [pc, #256]	; (8003174 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
 800307a:	e00b      	b.n	8003094 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	b2da      	uxtb	r2, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	6379      	str	r1, [r7, #52]	; 0x34
 8003086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	2b7f      	cmp	r3, #127	; 0x7f
 8003098:	d8f0      	bhi.n	800307c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	637a      	str	r2, [r7, #52]	; 0x34
 80030a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b4:	e00b      	b.n	80030ce <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80030c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	09db      	lsrs	r3, r3, #7
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	2b7f      	cmp	r3, #127	; 0x7f
 80030d2:	d8f0      	bhi.n	80030b6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	e00b      	b.n	8003108 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	6279      	str	r1, [r7, #36]	; 0x24
 80030fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2b7f      	cmp	r3, #127	; 0x7f
 800310c:	d8f0      	bhi.n	80030f0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	627a      	str	r2, [r7, #36]	; 0x24
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e00b      	b.n	8003140 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	61f9      	str	r1, [r7, #28]
 8003132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	09db      	lsrs	r3, r3, #7
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b7f      	cmp	r3, #127	; 0x7f
 8003144:	d8f0      	bhi.n	8003128 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	61fa      	str	r2, [r7, #28]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003156:	2215      	movs	r2, #21
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	6938      	ldr	r0, [r7, #16]
 800315c:	f7ff fbd4 	bl	8002908 <_SendPacket>
  RECORD_END();
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f383 8811 	msr	BASEPRI, r3
}
 8003166:	bf00      	nop
 8003168:	3748      	adds	r7, #72	; 0x48
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20005998 	.word	0x20005998
 8003174:	20005968 	.word	0x20005968

08003178 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800318e:	4b03      	ldr	r3, [pc, #12]	; (800319c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4798      	blx	r3
  }
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20005968 	.word	0x20005968

080031a0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031a8:	f3ef 8311 	mrs	r3, BASEPRI
 80031ac:	f04f 0120 	mov.w	r1, #32
 80031b0:	f381 8811 	msr	BASEPRI, r1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	480b      	ldr	r0, [pc, #44]	; (80031e4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80031b8:	f7ff facd 	bl	8002756 <_PreparePacket>
 80031bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6938      	ldr	r0, [r7, #16]
 80031c4:	f7ff fa7a 	bl	80026bc <_EncodeStr>
 80031c8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80031ca:	220e      	movs	r2, #14
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f7ff fb9a 	bl	8002908 <_SendPacket>
  RECORD_END();
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f383 8811 	msr	BASEPRI, r3
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20005998 	.word	0x20005998

080031e8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d019      	beq.n	800322a <SEGGER_SYSVIEW_RecordSystime+0x42>
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4798      	blx	r3
 8003208:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800320c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800320e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	0013      	movs	r3, r2
 800321c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800321e:	461a      	mov	r2, r3
 8003220:	4601      	mov	r1, r0
 8003222:	200d      	movs	r0, #13
 8003224:	f7ff fcec 	bl	8002c00 <SEGGER_SYSVIEW_RecordU32x2>
 8003228:	e005      	b.n	8003236 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	200c      	movs	r0, #12
 8003232:	f7ff fca9 	bl	8002b88 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	20005968 	.word	0x20005968
 8003244:	e0001004 	.word	0xe0001004

08003248 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800324e:	f3ef 8311 	mrs	r3, BASEPRI
 8003252:	f04f 0120 	mov.w	r1, #32
 8003256:	f381 8811 	msr	BASEPRI, r1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	4807      	ldr	r0, [pc, #28]	; (800327c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800325e:	f7ff fa7a 	bl	8002756 <_PreparePacket>
 8003262:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003264:	2211      	movs	r2, #17
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6838      	ldr	r0, [r7, #0]
 800326a:	f7ff fb4d 	bl	8002908 <_SendPacket>
  RECORD_END();
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f383 8811 	msr	BASEPRI, r3
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20005998 	.word	0x20005998

08003280 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003288:	f3ef 8311 	mrs	r3, BASEPRI
 800328c:	f04f 0120 	mov.w	r1, #32
 8003290:	f381 8811 	msr	BASEPRI, r1
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	481a      	ldr	r0, [pc, #104]	; (8003300 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003298:	f7ff fa5d 	bl	8002756 <_PreparePacket>
 800329c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e00b      	b.n	80032d0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	61f9      	str	r1, [r7, #28]
 80032c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	09db      	lsrs	r3, r3, #7
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b7f      	cmp	r3, #127	; 0x7f
 80032d4:	d8f0      	bhi.n	80032b8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	61fa      	str	r2, [r7, #28]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80032e6:	2208      	movs	r2, #8
 80032e8:	68f9      	ldr	r1, [r7, #12]
 80032ea:	6938      	ldr	r0, [r7, #16]
 80032ec:	f7ff fb0c 	bl	8002908 <_SendPacket>
  RECORD_END();
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f383 8811 	msr	BASEPRI, r3
}
 80032f6:	bf00      	nop
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20005998 	.word	0x20005998
 8003304:	20005968 	.word	0x20005968

08003308 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003310:	f3ef 8311 	mrs	r3, BASEPRI
 8003314:	f04f 0120 	mov.w	r1, #32
 8003318:	f381 8811 	msr	BASEPRI, r1
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	481a      	ldr	r0, [pc, #104]	; (8003388 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003320:	f7ff fa19 	bl	8002756 <_PreparePacket>
 8003324:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e00b      	b.n	8003358 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	61f9      	str	r1, [r7, #28]
 800334a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	09db      	lsrs	r3, r3, #7
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b7f      	cmp	r3, #127	; 0x7f
 800335c:	d8f0      	bhi.n	8003340 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	61fa      	str	r2, [r7, #28]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800336e:	2204      	movs	r2, #4
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f7ff fac8 	bl	8002908 <_SendPacket>
  RECORD_END();
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f383 8811 	msr	BASEPRI, r3
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20005998 	.word	0x20005998
 800338c:	20005968 	.word	0x20005968

08003390 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003398:	f3ef 8311 	mrs	r3, BASEPRI
 800339c:	f04f 0120 	mov.w	r1, #32
 80033a0:	f381 8811 	msr	BASEPRI, r1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	481a      	ldr	r0, [pc, #104]	; (8003410 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80033a8:	f7ff f9d5 	bl	8002756 <_PreparePacket>
 80033ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e00b      	b.n	80033e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	61f9      	str	r1, [r7, #28]
 80033d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	09db      	lsrs	r3, r3, #7
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b7f      	cmp	r3, #127	; 0x7f
 80033e4:	d8f0      	bhi.n	80033c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	61fa      	str	r2, [r7, #28]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80033f6:	2206      	movs	r2, #6
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	6938      	ldr	r0, [r7, #16]
 80033fc:	f7ff fa84 	bl	8002908 <_SendPacket>
  RECORD_END();
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f383 8811 	msr	BASEPRI, r3
}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20005998 	.word	0x20005998
 8003414:	20005968 	.word	0x20005968

08003418 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06d      	beq.n	8003506 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003430:	2300      	movs	r3, #0
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
 8003434:	e008      	b.n	8003448 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3301      	adds	r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344c:	429a      	cmp	r2, r3
 800344e:	d3f2      	bcc.n	8003436 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003450:	e000      	b.n	8003454 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003452:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d055      	beq.n	8003506 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800345a:	f3ef 8311 	mrs	r3, BASEPRI
 800345e:	f04f 0120 	mov.w	r1, #32
 8003462:	f381 8811 	msr	BASEPRI, r1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	482a      	ldr	r0, [pc, #168]	; (8003514 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800346a:	f7ff f974 	bl	8002756 <_PreparePacket>
 800346e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	e00b      	b.n	8003496 <SEGGER_SYSVIEW_SendModule+0x7e>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1c59      	adds	r1, r3, #1
 8003486:	6279      	str	r1, [r7, #36]	; 0x24
 8003488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	09db      	lsrs	r3, r3, #7
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2b7f      	cmp	r3, #127	; 0x7f
 800349a:	d8f0      	bhi.n	800347e <SEGGER_SYSVIEW_SendModule+0x66>
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	627a      	str	r2, [r7, #36]	; 0x24
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e00b      	b.n	80034d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	61f9      	str	r1, [r7, #28]
 80034c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	09db      	lsrs	r3, r3, #7
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b7f      	cmp	r3, #127	; 0x7f
 80034d4:	d8f0      	bhi.n	80034b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	61fa      	str	r2, [r7, #28]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	4619      	mov	r1, r3
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff f8e4 	bl	80026bc <_EncodeStr>
 80034f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80034f6:	2216      	movs	r2, #22
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	6938      	ldr	r0, [r7, #16]
 80034fc:	f7ff fa04 	bl	8002908 <_SendPacket>
      RECORD_END();
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3730      	adds	r7, #48	; 0x30
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20005990 	.word	0x20005990
 8003514:	20005998 	.word	0x20005998

08003518 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f2      	bne.n	800352c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20005990 	.word	0x20005990

08003554 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800355a:	f3ef 8311 	mrs	r3, BASEPRI
 800355e:	f04f 0120 	mov.w	r1, #32
 8003562:	f381 8811 	msr	BASEPRI, r1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4817      	ldr	r0, [pc, #92]	; (80035c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800356a:	f7ff f8f4 	bl	8002756 <_PreparePacket>
 800356e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e00b      	b.n	8003598 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	6179      	str	r1, [r7, #20]
 800358a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	09db      	lsrs	r3, r3, #7
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b7f      	cmp	r3, #127	; 0x7f
 800359c:	d8f0      	bhi.n	8003580 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	617a      	str	r2, [r7, #20]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80035ae:	221b      	movs	r2, #27
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68b8      	ldr	r0, [r7, #8]
 80035b4:	f7ff f9a8 	bl	8002908 <_SendPacket>
  RECORD_END();
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f383 8811 	msr	BASEPRI, r3
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20005998 	.word	0x20005998
 80035cc:	20005994 	.word	0x20005994

080035d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80035d8:	f3ef 8311 	mrs	r3, BASEPRI
 80035dc:	f04f 0120 	mov.w	r1, #32
 80035e0:	f381 8811 	msr	BASEPRI, r1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	4827      	ldr	r0, [pc, #156]	; (8003684 <SEGGER_SYSVIEW_Warn+0xb4>)
 80035e8:	f7ff f8b5 	bl	8002756 <_PreparePacket>
 80035ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	6938      	ldr	r0, [r7, #16]
 80035f4:	f7ff f862 	bl	80026bc <_EncodeStr>
 80035f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	2301      	movs	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e00b      	b.n	800361c <SEGGER_SYSVIEW_Warn+0x4c>
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	6279      	str	r1, [r7, #36]	; 0x24
 800360e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	09db      	lsrs	r3, r3, #7
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	2b7f      	cmp	r3, #127	; 0x7f
 8003620:	d8f0      	bhi.n	8003604 <SEGGER_SYSVIEW_Warn+0x34>
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	627a      	str	r2, [r7, #36]	; 0x24
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e00b      	b.n	8003654 <SEGGER_SYSVIEW_Warn+0x84>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	61f9      	str	r1, [r7, #28]
 8003646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	09db      	lsrs	r3, r3, #7
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b7f      	cmp	r3, #127	; 0x7f
 8003658:	d8f0      	bhi.n	800363c <SEGGER_SYSVIEW_Warn+0x6c>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	61fa      	str	r2, [r7, #28]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800366a:	221a      	movs	r2, #26
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	6938      	ldr	r0, [r7, #16]
 8003670:	f7ff f94a 	bl	8002908 <_SendPacket>
  RECORD_END();
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f383 8811 	msr	BASEPRI, r3
}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20005998 	.word	0x20005998

08003688 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800368c:	4803      	ldr	r0, [pc, #12]	; (800369c <_cbSendSystemDesc+0x14>)
 800368e:	f7ff fd87 	bl	80031a0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <_cbSendSystemDesc+0x18>)
 8003694:	f7ff fd84 	bl	80031a0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	08003cc0 	.word	0x08003cc0
 80036a0:	08003cf4 	.word	0x08003cf4

080036a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <SEGGER_SYSVIEW_Conf+0x1c>)
 80036aa:	4a06      	ldr	r2, [pc, #24]	; (80036c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036ac:	4906      	ldr	r1, [pc, #24]	; (80036c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80036ae:	4806      	ldr	r0, [pc, #24]	; (80036c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80036b0:	f7ff f9fe 	bl	8002ab0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80036b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80036b8:	f7ff fa38 	bl	8002b2c <SEGGER_SYSVIEW_SetRAMBase>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08003689 	.word	0x08003689
 80036c4:	08003d80 	.word	0x08003d80
 80036c8:	0a037a00 	.word	0x0a037a00

080036cc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e034      	b.n	8003742 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036d8:	491e      	ldr	r1, [pc, #120]	; (8003754 <_cbSendTaskList+0x88>)
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	491a      	ldr	r1, [pc, #104]	; (8003754 <_cbSendTaskList+0x88>)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3304      	adds	r3, #4
 80036f8:	681c      	ldr	r4, [r3, #0]
 80036fa:	4916      	ldr	r1, [pc, #88]	; (8003754 <_cbSendTaskList+0x88>)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	681d      	ldr	r5, [r3, #0]
 800370c:	4911      	ldr	r1, [pc, #68]	; (8003754 <_cbSendTaskList+0x88>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	330c      	adds	r3, #12
 800371c:	681e      	ldr	r6, [r3, #0]
 800371e:	490d      	ldr	r1, [pc, #52]	; (8003754 <_cbSendTaskList+0x88>)
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3310      	adds	r3, #16
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4633      	mov	r3, r6
 8003734:	462a      	mov	r2, r5
 8003736:	4621      	mov	r1, r4
 8003738:	f000 f8b4 	bl	80038a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3301      	adds	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <_cbSendTaskList+0x8c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3c5      	bcc.n	80036d8 <_cbSendTaskList+0xc>
  }
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	20005a7c 	.word	0x20005a7c
 8003758:	20005b1c 	.word	0x20005b1c

0800375c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003762:	f7fd fe4b 	bl	80013fc <xTaskGetTickCountFromISR>
 8003766:	4603      	mov	r3, r0
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003770:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003774:	462b      	mov	r3, r5
 8003776:	4634      	mov	r4, r6
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	0162      	lsls	r2, r4, #5
 8003782:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003786:	0159      	lsls	r1, r3, #5
 8003788:	460b      	mov	r3, r1
 800378a:	4614      	mov	r4, r2
 800378c:	1b5b      	subs	r3, r3, r5
 800378e:	eb64 0406 	sbc.w	r4, r4, r6
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	00a2      	lsls	r2, r4, #2
 800379c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80037a0:	0099      	lsls	r1, r3, #2
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	195b      	adds	r3, r3, r5
 80037a8:	eb44 0406 	adc.w	r4, r4, r6
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	00e2      	lsls	r2, r4, #3
 80037b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ba:	00d9      	lsls	r1, r3, #3
 80037bc:	460b      	mov	r3, r1
 80037be:	4614      	mov	r4, r2
 80037c0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80037c4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	4621      	mov	r1, r4
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037e2:	2205      	movs	r2, #5
 80037e4:	492b      	ldr	r1, [pc, #172]	; (8003894 <SYSVIEW_AddTask+0xc0>)
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f000 fa28 	bl	8003c3c <memcmp>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04b      	beq.n	800388a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d903      	bls.n	8003802 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037fa:	4828      	ldr	r0, [pc, #160]	; (800389c <SYSVIEW_AddTask+0xc8>)
 80037fc:	f7ff fee8 	bl	80035d0 <SEGGER_SYSVIEW_Warn>
    return;
 8003800:	e044      	b.n	800388c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4926      	ldr	r1, [pc, #152]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4921      	ldr	r1, [pc, #132]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3304      	adds	r3, #4
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	491b      	ldr	r1, [pc, #108]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3308      	adds	r3, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	330c      	adds	r3, #12
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4910      	ldr	r1, [pc, #64]	; (80038a0 <SYSVIEW_AddTask+0xcc>)
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3310      	adds	r3, #16
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <SYSVIEW_AddTask+0xc4>)
 8003876:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f80e 	bl	80038a4 <SYSVIEW_SendTaskInfo>
 8003888:	e000      	b.n	800388c <SYSVIEW_AddTask+0xb8>
    return;
 800388a:	bf00      	nop

}
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	08003d04 	.word	0x08003d04
 8003898:	20005b1c 	.word	0x20005b1c
 800389c:	08003d0c 	.word	0x08003d0c
 80038a0:	20005a7c 	.word	0x20005a7c

080038a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	2214      	movs	r2, #20
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f9d8 	bl	8003c70 <memset>
  TaskInfo.TaskID     = TaskID;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fb67 	bl	8002fac <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <TimingDelay>:
 *DWT_CYCCNT = 0; // reset the counter
 *DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
}
//******************************************************************************
void TimingDelay(unsigned int tick)
{
 80038e8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
// for(uint16_t k = 0 ; k <tick;k++)
// {
//   for(uint16_t i = 0 ; i <16000;i++);
// }

    Ms_delay[Ms_currentTaskIndex].DelayStart = Ms_delay[Ms_currentTaskIndex].DelayApp +tick ;
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <TimingDelay+0x6c>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <TimingDelay+0x70>)
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	469b      	mov	fp, r3
 8003904:	f04f 0c00 	mov.w	ip, #0
 8003908:	4812      	ldr	r0, [pc, #72]	; (8003954 <TimingDelay+0x6c>)
 800390a:	7800      	ldrb	r0, [r0, #0]
 800390c:	eb1b 0301 	adds.w	r3, fp, r1
 8003910:	eb4c 0402 	adc.w	r4, ip, r2
 8003914:	4910      	ldr	r1, [pc, #64]	; (8003958 <TimingDelay+0x70>)
 8003916:	0102      	lsls	r2, r0, #4
 8003918:	440a      	add	r2, r1
 800391a:	3208      	adds	r2, #8
 800391c:	e9c2 3400 	strd	r3, r4, [r2]

	while(Ms_delay[Ms_currentTaskIndex].DelayApp <  Ms_delay[Ms_currentTaskIndex].DelayStart )
 8003920:	bf00      	nop
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <TimingDelay+0x6c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <TimingDelay+0x70>)
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	4413      	add	r3, r2
 800392c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <TimingDelay+0x6c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4808      	ldr	r0, [pc, #32]	; (8003958 <TimingDelay+0x70>)
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4403      	add	r3, r0
 800393a:	3308      	adds	r3, #8
 800393c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003940:	42a2      	cmp	r2, r4
 8003942:	bf08      	it	eq
 8003944:	4299      	cmpeq	r1, r3
 8003946:	d3ec      	bcc.n	8003922 <TimingDelay+0x3a>
	{
	}
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8003952:	4770      	bx	lr
 8003954:	20005c90 	.word	0x20005c90
 8003958:	20005b28 	.word	0x20005b28

0800395c <MyTask_Func1>:
//
//#define T2_P                                                               80
//#define T2_C                                                               35

void MyTask_Func1(void *pvParameters )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 while(1)
 {
  TimingDelay(T1_C);
 8003964:	200a      	movs	r0, #10
 8003966:	f7ff ffbf 	bl	80038e8 <TimingDelay>

  Ms_EndJob_Exec();
 800396a:	f7fd ff6d 	bl	8001848 <Ms_EndJob_Exec>
 {
 800396e:	e7f9      	b.n	8003964 <MyTask_Func1+0x8>

08003970 <MyTask_Func2>:
 }
}


void MyTask_Func2(void *pvParameters )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 while(1)
 {
  TimingDelay(T2_C);
 8003978:	2014      	movs	r0, #20
 800397a:	f7ff ffb5 	bl	80038e8 <TimingDelay>

  Ms_EndJob_Exec();
 800397e:	f7fd ff63 	bl	8001848 <Ms_EndJob_Exec>
 {
 8003982:	e7f9      	b.n	8003978 <MyTask_Func2+0x8>

08003984 <MyTask_Func3>:
 }
}

void MyTask_Func3(void *pvParameters )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 while(1)
 {
  TimingDelay(T3_C);
 800398c:	2014      	movs	r0, #20
 800398e:	f7ff ffab 	bl	80038e8 <TimingDelay>

  Ms_EndJob_Exec();
 8003992:	f7fd ff59 	bl	8001848 <Ms_EndJob_Exec>
 {
 8003996:	e7f9      	b.n	800398c <MyTask_Func3+0x8>

08003998 <main>:
}



int main(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af06      	add	r7, sp, #24
 SystemClock_Config();
 800399e:	f000 f849 	bl	8003a34 <SystemClock_Config>

 SEGGER_SYSVIEW_Conf();
 80039a2:	f7ff fe7f 	bl	80036a4 <SEGGER_SYSVIEW_Conf>
                                                                               /*P   , D  ,  C   */
 MsFreeRTOS_CreateTask(  MyTask_Func1 , "Task 1", 800, (void*) 0 , 2 , NULL    ,T1_P ,T1_P, T1_C  );
 80039a6:	230a      	movs	r3, #10
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	2328      	movs	r3, #40	; 0x28
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	2328      	movs	r3, #40	; 0x28
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2302      	movs	r3, #2
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <main+0x84>)
 80039c2:	4817      	ldr	r0, [pc, #92]	; (8003a20 <main+0x88>)
 80039c4:	f7fd fe70 	bl	80016a8 <MsFreeRTOS_CreateTask>
 MsFreeRTOS_CreateTask(  MyTask_Func2 , "Task 2", 800, (void*) 0 , 2 , NULL    ,T2_P ,T2_P, T2_C  );
 80039c8:	2314      	movs	r3, #20
 80039ca:	9304      	str	r3, [sp, #16]
 80039cc:	2332      	movs	r3, #50	; 0x32
 80039ce:	9303      	str	r3, [sp, #12]
 80039d0:	2332      	movs	r3, #50	; 0x32
 80039d2:	9302      	str	r3, [sp, #8]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	2302      	movs	r3, #2
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80039e2:	4910      	ldr	r1, [pc, #64]	; (8003a24 <main+0x8c>)
 80039e4:	4810      	ldr	r0, [pc, #64]	; (8003a28 <main+0x90>)
 80039e6:	f7fd fe5f 	bl	80016a8 <MsFreeRTOS_CreateTask>

 MsFreeRTOS_CreateTask(  MyTask_Func3 , "Task 3", 500, (void*) 0 , 2 , NULL    ,T3_P ,T3_P ,T3_C  );
 80039ea:	2314      	movs	r3, #20
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	2346      	movs	r3, #70	; 0x46
 80039f0:	9303      	str	r3, [sp, #12]
 80039f2:	2346      	movs	r3, #70	; 0x46
 80039f4:	9302      	str	r3, [sp, #8]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	2302      	movs	r3, #2
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a04:	4909      	ldr	r1, [pc, #36]	; (8003a2c <main+0x94>)
 8003a06:	480a      	ldr	r0, [pc, #40]	; (8003a30 <main+0x98>)
 8003a08:	f7fd fe4e 	bl	80016a8 <MsFreeRTOS_CreateTask>



 vTaskStartScheduler();
 8003a0c:	f7fd fbf2 	bl	80011f4 <vTaskStartScheduler>

 int i = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	607b      	str	r3, [r7, #4]

 while (1)
 {
  i++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	e7fb      	b.n	8003a14 <main+0x7c>
 8003a1c:	08003d5c 	.word	0x08003d5c
 8003a20:	0800395d 	.word	0x0800395d
 8003a24:	08003d64 	.word	0x08003d64
 8003a28:	08003971 	.word	0x08003971
 8003a2c:	08003d6c 	.word	0x08003d6c
 8003a30:	08003985 	.word	0x08003985

08003a34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b094      	sub	sp, #80	; 0x50
 8003a38:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a3a:	f107 0320 	add.w	r3, r7, #32
 8003a3e:	2230      	movs	r2, #48	; 0x30
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f914 	bl	8003c70 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]

 /** Configure the main internal regulator output voltage
  */
 __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <SystemClock_Config+0xb4>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <SystemClock_Config+0xb4>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6413      	str	r3, [r2, #64]	; 0x40
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <SystemClock_Config+0xb4>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <SystemClock_Config+0xb8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <SystemClock_Config+0xb8>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <SystemClock_Config+0xb8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 /** Initializes the CPU, AHB and APB busses clocks
  */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a90:	2302      	movs	r3, #2
 8003a92:	623b      	str	r3, [r7, #32]
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a94:	2301      	movs	r3, #1
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a98:	2310      	movs	r3, #16
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa0:	f107 0320 	add.w	r3, r7, #32
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fe05 	bl	80006b4 <HAL_RCC_OscConfig>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <SystemClock_Config+0x80>
 {
  Error_Handler();
 8003ab0:	f000 f81e 	bl	8003af0 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB busses clocks
  */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	60fb      	str	r3, [r7, #12]
   |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]

 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd f832 	bl	8000b38 <HAL_RCC_ClockConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SystemClock_Config+0xaa>
 {
  Error_Handler();
 8003ada:	f000 f809 	bl	8003af0 <Error_Handler>
 }
}
 8003ade:	bf00      	nop
 8003ae0:	3750      	adds	r7, #80	; 0x50
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000

08003af0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */

 /* USER CODE END Error_Handler_Debug */
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <HardFault_Handler+0x4>

08003b12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <MemManage_Handler+0x4>

08003b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <BusFault_Handler+0x4>

08003b1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b22:	e7fe      	b.n	8003b22 <UsageFault_Handler+0x4>

08003b24 <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <SystemInit+0x60>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <SystemInit+0x60>)
 8003b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <SystemInit+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <SystemInit+0x64>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <SystemInit+0x64>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <SystemInit+0x64>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <SystemInit+0x64>)
 8003b60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <SystemInit+0x64>)
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <SystemInit+0x68>)
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <SystemInit+0x64>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <SystemInit+0x64>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <SystemInit+0x64>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <SystemInit+0x60>)
 8003b84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b88:	609a      	str	r2, [r3, #8]
#endif
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	24003010 	.word	0x24003010

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ba6:	e003      	b.n	8003bb0 <LoopCopyDataInit>

08003ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bae:	3104      	adds	r1, #4

08003bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bb0:	480b      	ldr	r0, [pc, #44]	; (8003be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bb8:	d3f6      	bcc.n	8003ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bbc:	e002      	b.n	8003bc4 <LoopFillZerobss>

08003bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bc0:	f842 3b04 	str.w	r3, [r2], #4

08003bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bc8:	d3f9      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bca:	f7ff ffb3 	bl	8003b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f000 f811 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7ff fee1 	bl	8003998 <main>
  bx  lr    
 8003bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bdc:	08003da8 	.word	0x08003da8
  ldr  r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003be4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003be8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003bec:	20005d3c 	.word	0x20005d3c

08003bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>
	...

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0d      	ldr	r6, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1ba4      	subs	r4, r4, r6
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2500      	movs	r5, #0
 8003c00:	42a5      	cmp	r5, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4e0b      	ldr	r6, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 f83a 	bl	8003c80 <_init>
 8003c0c:	1ba4      	subs	r4, r4, r6
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2500      	movs	r5, #0
 8003c12:	42a5      	cmp	r5, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1c:	4798      	blx	r3
 8003c1e:	3501      	adds	r5, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c26:	4798      	blx	r3
 8003c28:	3501      	adds	r5, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003da0 	.word	0x08003da0
 8003c30:	08003da0 	.word	0x08003da0
 8003c34:	08003da0 	.word	0x08003da0
 8003c38:	08003da4 	.word	0x08003da4

08003c3c <memcmp>:
 8003c3c:	b530      	push	{r4, r5, lr}
 8003c3e:	2400      	movs	r4, #0
 8003c40:	42a2      	cmp	r2, r4
 8003c42:	d101      	bne.n	8003c48 <memcmp+0xc>
 8003c44:	2000      	movs	r0, #0
 8003c46:	e007      	b.n	8003c58 <memcmp+0x1c>
 8003c48:	5d03      	ldrb	r3, [r0, r4]
 8003c4a:	3401      	adds	r4, #1
 8003c4c:	190d      	adds	r5, r1, r4
 8003c4e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003c52:	42ab      	cmp	r3, r5
 8003c54:	d0f4      	beq.n	8003c40 <memcmp+0x4>
 8003c56:	1b58      	subs	r0, r3, r5
 8003c58:	bd30      	pop	{r4, r5, pc}

08003c5a <memcpy>:
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	1e43      	subs	r3, r0, #1
 8003c5e:	440a      	add	r2, r1
 8003c60:	4291      	cmp	r1, r2
 8003c62:	d100      	bne.n	8003c66 <memcpy+0xc>
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6e:	e7f7      	b.n	8003c60 <memcpy+0x6>

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <_init>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr

08003c8c <_fini>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr
